<?php
/* ----------- data class extends dbTable for tbl_calendar------------*/
// security check - must be included in all scripts
if (!$GLOBALS['kewl_entry_point_run'])
    {
        die("You cannot view this page directly");
    }

/**
* Calendar Generator Class
*
* @author Tohir Solomons
* @copyright (c) 2005 University of the Western Cape
* @package calendarbase
* @version 1
*
* This class was written based on a function written by Keith Devens
* The original function PHP Calendar (version 2.3), can be found at:
* http://keithdevens.com/software/php_calendar
* Licence: http://keithdevens.com/software/license
*
* Changes that occurred:
* - Parameters of the function were moved to variables of the class
* - The original function was called 'generate_calendar'. In conformity with KEWL.Nextgen, it has been called show().
* - Names of the month and days are generated by KEWL.NextGen's language database
* - The ability has been added to have titles within the day
* - CSS styles have been coded into the class
*
* A note on the events array:
*
* The array is in the format $event[$day] => $ content, where:
* - $event is the array holding the events
* - $day is the day of the month 
* - $content is the content you want to have appear
*
* An example would be: $event['25'] => 'My Birthday';
*
* The month and year would be determine by the $month and $year variables
*/
class calendargenerator extends object
{
    /**
    * @var year The Year for which the calendar should be generated
    */
    var $year;
    
    /**
    * @var month The Month for which the calendar should be generated
    */
    var $month;
    
    /**
    * @var events An array containing a list of events
    */
    var $events;
    
    /**
    * @var size The size of the calendar. either big or small
    */
    var $size;
    
    /**
    * @var first_day The First Day of the Week in the Calendar
    */
    var $first_day;
    
    /**
    * Constructor method for the class
    */
    function init()
    {
        $this->objSimpleCal =& $this->getObject('simplecal', 'datetime');
        $this->objDateFunctions =& $this->getObject('datefunctions');
        $this->month = date('m');
        $this->year = date('Y');
        $this->size = 'big';
        $this->first_day = 0;
    }
    
    /**
    * Method to set the events array
    * 
    * @param array $events List of Events
    */
    function setEvents($events)
    {
        $this->events = $events;
    }
    
    
    
    /**
    * Method to generate the calendar
    */
    function show()
    {
        $first_of_month = gmmktime(0,0,0,$this->month,1,$this->year);
        #remember that mktime will automatically correct if invalid dates are entered
        # for instance, mktime(0,0,0,12,32,1997) will be the date for Jan 1, 1998
        # this provides a built in "rounding" feature to generate_calendar()
        
        //if ($this->year
        
        $day_names = array(); #generate all the day names according to the current locale
        
        if ($this->first_day == 0) {
            $this->objSimpleCal->startweek='sun';
        }
        if ($this->size == 'big') {
            $day_names = $this->objSimpleCal->getDaysAsArray('3letter');
            $extraCss = ' bigheight';
            $width = 'width="14%"';
        } else {
            $day_names = $this->objSimpleCal->getDaysAsArray('1letter');
            $extraCss = ' smallCalendar';
            $width = '';
        }
    
        list($month, $year, $month_name, $weekday) = explode(',',gmstrftime('%m,%Y,%B,%w',$first_of_month));
        $weekday = ($weekday + 7 - $this->first_day) % 7; #adjust for $this->first_day
        
        $calendar = '<table class="calendar'.$extraCss.'">';
        if ($this->size != 'big') {
            $calendar .= '<thead><th colspan="7" align="center">'.$this->objSimpleCal->monthFull($this->month).' '.$this->year.'</th></thead>';
        }
        $calendar .= '<thead>';
        
        foreach($day_names as $d) 
        {
            $calendar .= '<th '.$width.'>'.$d.'</th>'; 
        }
        
        $calendar .= "</thead>\n<tr>";
        
        // Initial Days from previous month
        if($weekday > 0) { 
            for ($i=0; $i < $weekday; $i++)
            {
                $calendar .= '<td class="cal-greyday">&nbsp;</td>';  
            }
        } // END - Initial Days from previous month
        
        for($day=1,$days_in_month=gmdate('t',$first_of_month); $day<=$days_in_month; $day++,$weekday++)
        {
            if($weekday == 7){
                $weekday   = 0; // start a new week
                $calendar .= "</tr>\n<tr>";
            }
            if(isset($this->events[$day]) ){
                
                $content = $this->events[$day];
                
                if(is_null($content)) {
                    $content  = $day;
                }
                
                if ($this->year == date('Y') && $this->month == date('n') && $day == date('j') ){
                    $cssClass = 'todaycal';
                } else {
                    $cssClass = 'eventday';
                }
                if ($this->size == 'big') {
                    $calendar .= '<td class="'.$cssClass.'"><a href="#'.$day.'">'.$day.'</a>';
                } else {
                    $calendar .= '<td class="'.$cssClass.'">'.$day.'</a>';
                }
                
                if (isset($content) && $this->size=='big') {
                    $calendar .= $content;
                }
                $calendar .= '</td>';
                //($link ? '<a href="'.htmlspecialchars($link).'">'.$content.'</a>' : $day.$content)
            }
            else if ($this->year == date('Y') && $this->month == date('n') && $day == date('j') ){
                $calendar .= '<td class="todaycal">'.$day.'</td>';
            }
            else {
                $calendar .= '<td class="normalday">'.$day.'</td>';
            }
        }
        
        // Rest of days from next month
        if($weekday != 7) {
            for ($i=0; $i < (7 - $weekday); $i++)
            {
                $calendar .= '<td class="cal-greyday">&nbsp;</td>';  
            }
        }// END - Rest of days from next month
        
        return $calendar."</tr>\n</table>\n";
    }


}

?>