/*
 * RealtimeOptionsFrame.java
 *
 * Created on 06 April 2008, 01:06
 */
package avoir.realtime.tcp.base;


import javax.swing.JOptionPane;

/**
 *
 * @author  developer
 */
public class RealtimeOptionsFrame extends javax.swing.JFrame {

    private String voiceServiceNotRunningText = "Service NOT running";
    private String voiceServiceRunningText = "Service Running";
    private RealtimeBase applet;

    /** Creates new form RealtimeOptionsFrame */
    public RealtimeOptionsFrame(RealtimeBase applet, int selectedTabIndex) {
        this.applet = applet;
        initComponents();
        tabbedPane.setSelectedIndex(selectedTabIndex);
        directOpt.setSelected(RealtimeOptions.useDirectConnection());
        manualOpt.setSelected(RealtimeOptions.useManualProxy());
        systemOpt.setSelected(RealtimeOptions.useSystemProxy());
        cachingOpt.setSelected(RealtimeOptions.useCache());
        onlineSNOpt.setSelected(true);
        otherSNHostField.setText("127.0.0.1");
        otherSNPortField.setText("22225");
        proxyHostField.setText(RealtimeOptions.getProxyHost());
        buttonGroup1.add(directOpt);
        buttonGroup1.add(manualOpt);
        buttonGroup1.add(systemOpt);
        proxyPortField.setText(RealtimeOptions.getProxyPort());
        updateVoiceServiceTextStatus();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">                          
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        buttonGroup1 = new javax.swing.ButtonGroup();
        jRadioButton1 = new javax.swing.JRadioButton();
        buttonGroup2 = new javax.swing.ButtonGroup();
        titlePanel = new javax.swing.JPanel();
        titleLabel = new javax.swing.JLabel();
        cPanel = new javax.swing.JPanel();
        cancelButton = new javax.swing.JButton();
        okButton = new javax.swing.JButton();
        tabbedPane = new javax.swing.JTabbedPane();
        mainPanel = new javax.swing.JPanel();
        directOpt = new javax.swing.JRadioButton();
        systemOpt = new javax.swing.JRadioButton();
        manualOpt = new javax.swing.JRadioButton();
        proxyHostLabel = new javax.swing.JLabel();
        proxyHostField = new javax.swing.JTextField();
        proxyPortLabel = new javax.swing.JLabel();
        proxyPortField = new javax.swing.JTextField();
        localSNOpt = new javax.swing.JRadioButton();
        onlineSNOpt = new javax.swing.JRadioButton();
        otherSNHostField = new javax.swing.JTextField();
        snHostLabel = new javax.swing.JLabel();
        snPortLabel = new javax.swing.JLabel();
        otherSNPortField = new javax.swing.JTextField();
        cachingOpt = new javax.swing.JCheckBox();
        clearCacheButton = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        voiceServerPortField = new javax.swing.JTextField();
        voiceServiceButton = new javax.swing.JButton();
        voiceServerStatusField = new javax.swing.JLabel();

        jRadioButton1.setText("jRadioButton1");

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Realtime Connection Options");

        titleLabel.setFont(new java.awt.Font("Dialog", 1, 18));
        titleLabel.setForeground(new java.awt.Color(255, 153, 51));
        titleLabel.setText("Realtime Options");
        titlePanel.add(titleLabel);

        getContentPane().add(titlePanel, java.awt.BorderLayout.PAGE_START);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        cPanel.add(cancelButton);

        okButton.setText("OK");
        okButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                okButtonActionPerformed(evt);
            }
        });
        cPanel.add(okButton);

        getContentPane().add(cPanel, java.awt.BorderLayout.PAGE_END);

        mainPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Connection Options"));
        mainPanel.setLayout(new java.awt.GridBagLayout());

        directOpt.setText("Direct Connection");
        directOpt.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                directOptActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mainPanel.add(directOpt, gridBagConstraints);

        systemOpt.setText("Use System Proxy");
        systemOpt.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                systemOptActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mainPanel.add(systemOpt, gridBagConstraints);

        manualOpt.setText("Manual Proxy Configuration");
        manualOpt.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manualOptActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mainPanel.add(manualOpt, gridBagConstraints);

        proxyHostLabel.setText("Proxy Host");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mainPanel.add(proxyHostLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mainPanel.add(proxyHostField, gridBagConstraints);

        proxyPortLabel.setText("Proxy Port");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mainPanel.add(proxyPortLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mainPanel.add(proxyPortField, gridBagConstraints);

        buttonGroup2.add(localSNOpt);
        localSNOpt.setText("Connect to other super node");
        localSNOpt.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                localSNOptActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(9, 0, 0, 0);
        mainPanel.add(localSNOpt, gridBagConstraints);

        buttonGroup2.add(onlineSNOpt);
        onlineSNOpt.setSelected(true);
        onlineSNOpt.setText("Connect to online supernodes");
        onlineSNOpt.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                onlineSNOptActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mainPanel.add(onlineSNOpt, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        mainPanel.add(otherSNHostField, gridBagConstraints);

        snHostLabel.setText("Host");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mainPanel.add(snHostLabel, gridBagConstraints);

        snPortLabel.setText("Port");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 12;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mainPanel.add(snPortLabel, gridBagConstraints);
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 13;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mainPanel.add(otherSNPortField, gridBagConstraints);

        cachingOpt.setText("Use Caching");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 15;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mainPanel.add(cachingOpt, gridBagConstraints);

        clearCacheButton.setText("Clear Cache");
        clearCacheButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearCacheButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 16;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        mainPanel.add(clearCacheButton, gridBagConstraints);

        tabbedPane.addTab("Network", mainPanel);

        jPanel1.setLayout(new java.awt.GridBagLayout());

        jLabel1.setText("Voice Service Port:");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        jPanel1.add(jLabel1, gridBagConstraints);

        voiceServerPortField.setText("22224");
        voiceServerPortField.setPreferredSize(new java.awt.Dimension(81, 21));
        voiceServerPortField.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voiceServerPortFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(4, 0, 0, 0);
        jPanel1.add(voiceServerPortField, gridBagConstraints);

        voiceServiceButton.setText("Start");
        voiceServiceButton.addActionListener(new java.awt.event.ActionListener() {

            public void actionPerformed(java.awt.event.ActionEvent evt) {
                voiceServiceButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(15, 1, 0, 1);
        jPanel1.add(voiceServiceButton, gridBagConstraints);

        voiceServerStatusField.setText("Service NOT Running");
        voiceServerStatusField.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        jPanel1.add(voiceServerStatusField, gridBagConstraints);

        tabbedPane.addTab("Audio", jPanel1);

        getContentPane().add(tabbedPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>                        

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {
        dispose();
    }

    private void okButtonActionPerformed(java.awt.event.ActionEvent evt) {
        RealtimeOptions.setProxyHost(proxyHostField.getText());
        RealtimeOptions.setProxyPort(proxyPortField.getText());
        RealtimeOptions.setUseDirectConnection(directOpt.isSelected());
        RealtimeOptions.setUseManualProxy(manualOpt.isSelected());
        RealtimeOptions.setUseSystemProxy(systemOpt.isSelected());
        if (localSNOpt.isSelected()) {
//            applet.getTCPClient().setSuperNodeHost(otherSNHostField.getText());
  //          applet.getTCPClient().setSuperNodePort(Integer.parseInt(otherSNPortField.getText().trim()));
        }
        //    client.refresh();
        dispose();

    }

    private void saveChanges() {
        RealtimeOptions.setProxyHost(proxyHostField.getText());
        RealtimeOptions.setProxyPort(proxyPortField.getText());
        RealtimeOptions.setUseDirectConnection(directOpt.isSelected());
        RealtimeOptions.setUseManualProxy(manualOpt.isSelected());
        RealtimeOptions.setUseSystemProxy(systemOpt.isSelected());
        RealtimeOptions.setUseCache(cachingOpt.isSelected());
//        client.refresh();

    }

    public void updateVoiceServiceTextStatus() {
        boolean running = false;// client.getVoiceEngineInstance().speakerStarted();

        voiceServerStatusField.setText(
                running ? voiceServiceRunningText : voiceServiceNotRunningText);
        voiceServiceButton.setText(running ? "Restart" : "Start");
    }

    private void clearCache() {
        String cache = System.getProperty("user.home") + "/avoir-realtime-0.1/presentations/";
        java.io.File f = new java.io.File(cache);
        String[] list = f.list();
        //loop through files and delete everything in it
        for (int i = 0; i < list.length; i++) {
            java.io.File session = new java.io.File(cache + "/" + list[i]);
            String[] imgs = session.list();
            for (int j = 0; j < imgs.length; j++) {
                java.io.File img = new java.io.File(session.getAbsolutePath() + "/" + imgs[j]);
                img.delete();
            }
            session.delete();
        }
        if (f.delete()) {
            JOptionPane.showMessageDialog(null, "Cache cleared");
        } else {
            JOptionPane.showMessageDialog(null, "Could not clear cache!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void manualOptActionPerformed(java.awt.event.ActionEvent evt) {
        saveChanges();

    }

    private void systemOptActionPerformed(java.awt.event.ActionEvent evt) {
        saveChanges();
    }

    private void directOptActionPerformed(java.awt.event.ActionEvent evt) {
        saveChanges();
    }

    private void onlineSNOptActionPerformed(java.awt.event.ActionEvent evt) {
        RealtimeOptions.setUseOnlineSuperNodes(true);
    }

    private void localSNOptActionPerformed(java.awt.event.ActionEvent evt) {
        RealtimeOptions.setUseOnlineSuperNodes(false);
    }

    private void clearCacheButtonActionPerformed(java.awt.event.ActionEvent evt) {
        int t = JOptionPane.showConfirmDialog(null, "Are you sure you want to clear the cache? ", "Delete Cache", JOptionPane.YES_NO_OPTION);
        if (t == JOptionPane.YES_OPTION) {
            clearCache();
        }
    // TODO add your handling code here:
    }

    private void voiceServerPortFieldActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    private void voiceServiceButtonActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    }

    // Variables declaration - do not modify                     
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.ButtonGroup buttonGroup2;
    private javax.swing.JPanel cPanel;
    private javax.swing.JCheckBox cachingOpt;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton clearCacheButton;
    private javax.swing.JRadioButton directOpt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton localSNOpt;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JRadioButton manualOpt;
    private javax.swing.JButton okButton;
    private javax.swing.JRadioButton onlineSNOpt;
    private javax.swing.JTextField otherSNHostField;
    private javax.swing.JTextField otherSNPortField;
    private javax.swing.JTextField proxyHostField;
    private javax.swing.JLabel proxyHostLabel;
    private javax.swing.JTextField proxyPortField;
    private javax.swing.JLabel proxyPortLabel;
    private javax.swing.JLabel snHostLabel;
    private javax.swing.JLabel snPortLabel;
    private javax.swing.JRadioButton systemOpt;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel titlePanel;
    private javax.swing.JTextField voiceServerPortField;
    private javax.swing.JLabel voiceServerStatusField;
    private javax.swing.JButton voiceServiceButton;
    // End of variables declaration                   
}
