/*
 * ClientAdmin.java
 *
 * Created on 01 May 2008, 11:34
 */
package avoir.realtime.tcp.base.admin;

import avoir.realtime.tcp.base.*;

import javax.swing.*;
import java.io.*;
import java.nio.ByteBuffer;
import java.nio.channels.FileChannel;
import java.util.Vector;

/**
 *
 * @author  developer
 */
public class ClientAdmin extends javax.swing.JFrame {

    JFileChooser fc = new JFileChooser(".");
    TCPClient client;
    String selectedFilename;

    /** Creates new form ClientAdmin */
    public ClientAdmin() {
        initComponents();
        setLocationRelativeTo(null);
        setSize(500, 500);
    }

    public void sendSystemFile(String filePath, String filename) {

        client.sendSystemFile(filePath, filename);

    }

    public static java.util.Vector readTextFile(String file) {
        Vector lines = new Vector();

        try {
            BufferedReader in = new BufferedReader(new FileReader(file));
            String line;
            while ((line = in.readLine()) != null) {
                lines.addElement(line);

            }

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return lines;

    }

    public void restartServer() {
        //   client.sendRestartServerPacket();
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        titleLabel = new javax.swing.JLabel();
        cPanel = new javax.swing.JPanel();
        closeButton = new javax.swing.JButton();
        tabbedPane = new javax.swing.JTabbedPane();
        generalPanel = new javax.swing.JPanel();
        uploadLabel = new javax.swing.JLabel();
        fileNameField = new javax.swing.JTextField();
        browseButton = new javax.swing.JButton();
        restartButton = new javax.swing.JButton();
        restartInfoLabel = new javax.swing.JLabel();
        snHostLabel = new javax.swing.JLabel();
        snHostField = new javax.swing.JTextField();
        snPortLabel = new javax.swing.JLabel();
        snPortField = new javax.swing.JTextField();
        systemOpt = new javax.swing.JCheckBox();
        connectButton = new javax.swing.JButton();
        sendFileButton = new javax.swing.JButton();
        logTab = new javax.swing.JPanel();
        topPanel = new javax.swing.JPanel();
        getLogButton = new javax.swing.JButton();
        sp = new javax.swing.JScrollPane();
        infoField = new javax.swing.JTextArea();
        appletUploadPanel = new javax.swing.JPanel();
        cAppletPanel = new javax.swing.JPanel();
        appletBrowseButton = new javax.swing.JButton();
        selectedFileField = new javax.swing.JTextField();
        appletUploadButton = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        hostField = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        appletInfoField = new javax.swing.JTextPane();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        titleLabel.setFont(new java.awt.Font("Dialog", 1, 18));
        titleLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        titleLabel.setText("Admin Client 0.1");
        getContentPane().add(titleLabel, java.awt.BorderLayout.PAGE_START);

        closeButton.setText("Close");
        closeButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                closeButtonActionPerformed(evt);
            }
        });
        cPanel.add(closeButton);

        getContentPane().add(cPanel, java.awt.BorderLayout.PAGE_END);

        generalPanel.setLayout(new java.awt.GridBagLayout());

        uploadLabel.setText("Upload system file");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 7;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        generalPanel.add(uploadLabel, gridBagConstraints);

        fileNameField.setPreferredSize(new java.awt.Dimension(200, 18));
        fileNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                fileNameFieldActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        generalPanel.add(fileNameField, gridBagConstraints);

        browseButton.setText("Browse");
        browseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                browseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 8;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(2, 0, 0, 0);
        generalPanel.add(browseButton, gridBagConstraints);

        restartButton.setText("Restart Server");
        restartButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                restartButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 10;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 0, 0);
        generalPanel.add(restartButton, gridBagConstraints);

        restartInfoLabel.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
        restartInfoLabel.setPreferredSize(new java.awt.Dimension(200, 21));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 11;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.insets = new java.awt.Insets(3, 0, 0, 0);
        generalPanel.add(restartInfoLabel, gridBagConstraints);

        snHostLabel.setText("SN Host");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        generalPanel.add(snHostLabel, gridBagConstraints);

        snHostField.setText("127.0.0.1");
        snHostField.setPreferredSize(new java.awt.Dimension(150, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        generalPanel.add(snHostField, gridBagConstraints);

        snPortLabel.setText("SN Port");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        generalPanel.add(snPortLabel, gridBagConstraints);

        snPortField.setText("22225");
        snPortField.setPreferredSize(new java.awt.Dimension(163, 18));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        generalPanel.add(snPortField, gridBagConstraints);

        systemOpt.setText("Use system SN");
        systemOpt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                systemOptActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 5;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        generalPanel.add(systemOpt, gridBagConstraints);

        connectButton.setText("Connect");
        connectButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 6;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        generalPanel.add(connectButton, gridBagConstraints);

        sendFileButton.setText("Send File");
        sendFileButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendFileButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 9;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        generalPanel.add(sendFileButton, gridBagConstraints);

        tabbedPane.addTab("Server", generalPanel);

        logTab.setLayout(new java.awt.BorderLayout());

        getLogButton.setText("Get Log");
        getLogButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                getLogButtonActionPerformed(evt);
            }
        });
        topPanel.add(getLogButton);

        logTab.add(topPanel, java.awt.BorderLayout.PAGE_START);

        infoField.setColumns(20);
        infoField.setRows(5);
        sp.setViewportView(infoField);

        logTab.add(sp, java.awt.BorderLayout.CENTER);

        tabbedPane.addTab("Log", logTab);

        appletUploadPanel.setLayout(new java.awt.BorderLayout());

        cAppletPanel.setLayout(new java.awt.GridBagLayout());

        appletBrowseButton.setText("Browse");
        appletBrowseButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appletBrowseButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(8, 0, 0, 0);
        cAppletPanel.add(appletBrowseButton, gridBagConstraints);

        selectedFileField.setPreferredSize(new java.awt.Dimension(200, 19));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.EAST;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 0, 0);
        cAppletPanel.add(selectedFileField, gridBagConstraints);

        appletUploadButton.setText("Upload");
        appletUploadButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appletUploadButtonActionPerformed(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        gridBagConstraints.insets = new java.awt.Insets(7, 0, 0, 0);
        cAppletPanel.add(appletUploadButton, gridBagConstraints);

        jLabel1.setText("Host");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.anchor = java.awt.GridBagConstraints.WEST;
        cAppletPanel.add(jLabel1, gridBagConstraints);

        hostField.setEditable(true);
        hostField.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "http://chameleon.uwc.ac.za/app/chisimba_modules/realtime/templates/content/uploadfile.php", "http://localhost/chisimba_modules_svn/realtime/templates/content/uploadfile.php" }));
        hostField.setMinimumSize(new java.awt.Dimension(200, 24));
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        cAppletPanel.add(hostField, gridBagConstraints);

        appletUploadPanel.add(cAppletPanel, java.awt.BorderLayout.CENTER);

        tabbedPane.addTab("Applet Upload", appletUploadPanel);

        jScrollPane1.setMinimumSize(new java.awt.Dimension(400, 400));

        appletInfoField.setContentType("text/html");
        appletInfoField.setEditable(false);
        jScrollPane1.setViewportView(appletInfoField);

        tabbedPane.addTab("Upload Results", jScrollPane1);

        getContentPane().add(tabbedPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void fileNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_fileNameFieldActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_fileNameFieldActionPerformed

    private void browseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_browseButtonActionPerformed
        if (fc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            fileNameField.setText(f.getAbsolutePath());
            selectedFilename = f.getName();
        }

    }//GEN-LAST:event_browseButtonActionPerformed

    private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
        System.exit(0);
}//GEN-LAST:event_closeButtonActionPerformed

    private void restartButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_restartButtonActionPerformed
        restartServer();
    }//GEN-LAST:event_restartButtonActionPerformed

    private void systemOptActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_systemOptActionPerformed
        // TODO add your handling code here:
}//GEN-LAST:event_systemOptActionPerformed

    private void getLogButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_getLogButtonActionPerformed
        client.requestServerLog();
    }//GEN-LAST:event_getLogButtonActionPerformed

    public void setMessage(String msg) {
        restartInfoLabel.setText(msg);
    }

    private void connectButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectButtonActionPerformed
        client = new TCPClient(this);
        client.setSuperNodeHost(snHostField.getText());
        client.setSuperNodePort(Integer.parseInt(snPortField.getText()));
//        if (!client.connect()) {
        JOptionPane.showMessageDialog(null, "Cannot connect to the server");
    //      } // TODO add your handling code here:
    //    else {
    //      restartInfoLabel.setText("Connected.");
    //}
}//GEN-LAST:event_connectButtonActionPerformed

    private void sendFileButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendFileButtonActionPerformed
        sendSystemFile(fileNameField.getText(), selectedFilename);
}//GEN-LAST:event_sendFileButtonActionPerformed

    private void upload() {
        try {
            String host = (String) hostField.getSelectedItem();
            ClientHttpRequest httpclient = new ClientHttpRequest(host);
            File f = new File(selectedFileField.getText());
            Object[] params = {
                "contentBasePath", "/var/www/app/chisimba_modules/realtime/resources/",
                "File0", f
            };
            InputStream in = httpclient.post(params);
            BufferedReader bin = new BufferedReader(new InputStreamReader(in));
            String s = "";
            String reply = "";
            while ((s = bin.readLine()) != null) {
                reply += s + "\n";
            }
            in.close();
            appletInfoField.setText(reply);
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    private void browseForApplet() {
        if (fc.showOpenDialog(this) == JFileChooser.APPROVE_OPTION) {
            selectedFileField.setText(fc.getSelectedFile().getAbsolutePath());
        }
    }
private void appletUploadButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appletUploadButtonActionPerformed
    upload();
}//GEN-LAST:event_appletUploadButtonActionPerformed

private void appletBrowseButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appletBrowseButtonActionPerformed
    browseForApplet();
}//GEN-LAST:event_appletBrowseButtonActionPerformed

    public void setLog(byte[] byteArray) {
        String home = System.getProperty("user.home") + "/avoir-realtime-0.1/log";
        File f = new File(home);
        if (!f.exists()) {
            f.mkdirs();
        }
        try {
            String fn = home + "/wrapper.log";
            FileChannel fileChannel =
                    new FileOutputStream(fn).getChannel();
            fileChannel.write(ByteBuffer.wrap(byteArray));
            fileChannel.close();
            Vector content = readTextFile(fn);
            infoField.setText("");
            for (int i = 0; i < content.size(); i++) {
                infoField.append((String) content.elementAt(i) + "\n");
            }
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Error getting log");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new ClientAdmin().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton appletBrowseButton;
    private javax.swing.JTextPane appletInfoField;
    private javax.swing.JButton appletUploadButton;
    private javax.swing.JPanel appletUploadPanel;
    private javax.swing.JButton browseButton;
    private javax.swing.JPanel cAppletPanel;
    private javax.swing.JPanel cPanel;
    private javax.swing.JButton closeButton;
    private javax.swing.JButton connectButton;
    private javax.swing.JTextField fileNameField;
    private javax.swing.JPanel generalPanel;
    private javax.swing.JButton getLogButton;
    private javax.swing.JComboBox hostField;
    private javax.swing.JTextArea infoField;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel logTab;
    private javax.swing.JButton restartButton;
    private javax.swing.JLabel restartInfoLabel;
    private javax.swing.JTextField selectedFileField;
    private javax.swing.JButton sendFileButton;
    private javax.swing.JTextField snHostField;
    private javax.swing.JLabel snHostLabel;
    private javax.swing.JTextField snPortField;
    private javax.swing.JLabel snPortLabel;
    private javax.swing.JScrollPane sp;
    private javax.swing.JCheckBox systemOpt;
    private javax.swing.JTabbedPane tabbedPane;
    private javax.swing.JLabel titleLabel;
    private javax.swing.JPanel topPanel;
    private javax.swing.JLabel uploadLabel;
    // End of variables declaration//GEN-END:variables
}
