<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
    "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
<head>
  <meta http-equiv="Content-Type" content=
  "text/html; charset=us-ascii" />
  <meta name="description" content=
  "Demonstration of the ISO 8601 format for duration as used in SCORM 2004, with script sample in page source" />
  <meta name="keywords" content=
  "SCORM,SCORM 2004,ISO 8601,duration,timestamp,time stamp,date, time, JavaScript, ECMAscript" />
  <meta name="generator" content="Claude" />
  <meta name="original publish date" content="16 August 2004" />
  <meta name="publish date" content="11 May 2005" />
  <meta name="version" content="1.0.050511" />
  <meta name="copyright" content=
  "Copyright (c) 2004,2005,2006,2007 Claude Ostyn - Some rights reserved" />

  <title>ISO 8601 format for duration and time stamps in SCORM
  2004</title><!--
This page and the scripts it contains are
Copyright (c) 2004,2005,2006,2007 Claude Ostyn - Some rights reserved

The scripts on this page are free for use with attribution
under the Creative Commons Attribution License.
To view a copy of this license, visit
http://creativecommons.org/licenses/by/2.5/
or send a letter to
Creative Commons, 559 Nathan Abbott Way, Stanford, California 94305, USA.
-->

<script src="ostyn2004sco.js" language="JavaScript" type=
"text/javascript">
</script>
<script src="ostynscormtime.js" id="reusableFunctions" language=
"JavaScript" type="text/javascript">
</script>
<script id="AdvancedBrowsersScript" type="text/javascript">
//<![CDATA[



// Event handlers to enable action for entry fields if the
// use clicks Enter without requiring click on corresponding
// button
// (experimental)

function BrowserCannotHandleClickTrigger()
{
  // FireFox raises a stupid unwarranted exception when
  // trying to do a simple safe thing like triggering an onclick event
  return ((navigator.vendor) && (navigator.vendor=="Firefox"))
}

function IsIE()
{
  return (navigator.appName == "Microsoft Internet Explorer");
}

function InitEventHandling()
{
  var aElems = document.getElementsByTagName('INPUT');
  var o = null;
  for (i in aElems)
  {
    if (aElems[i].type == "text") aElems[i].onkeyup = HandleInputKeyUp;
  }
}

function HandleInputKeyUp(e)
{
  if (!e) var e = window.event;
  var tgt = null;
  if(e.target) tgt = e.target;
  else if (e.srcElement) tgt = e.srcElement;
  var nC;
  if (e.keyCode) nC = e.keyCode;
  else if (e.which) nC = e.which;
  if (!tgt) return;
  if ((tgt.tagName.toUpperCase()=="INPUT") && (nC == 13))
  {
    if (BrowserCannotHandleClickTrigger()) return;
    var Btn = document.getElementById(tgt.id + "Btn");
    if (Btn)
    {
      if (IsIE())
      {
        e.cancelBubble = true;
        e.returnValue = false;
      }
      Btn.click();
      return false;
    }
  }
}
//]]>
</script>
<script id="PrivatePageScript" type="text/javascript">
//<![CDATA[


/**** Everything below is for the demo page only ****/

var gnDemo1 = Math.round(Math.random() * 600000);
var  gnDemo2 = Math.round(Math.random() * 600000);

function arithmeticDemoFlipFormat()
{
  arithmeticDemo(true); // don't reset demo values
}

function arithmeticDemo(bNoReset)
{
  var bAllowBadSubtract = false;
  var n=0,n1=gnDemo1,n2=gnDemo2;
  var s1,s2;
  with (document)
  {
    var bPrecise = getElementById("UsePreciseForm").checked;
    if (bNoReset != true)
    {
      var n1 = parseInt(getElementById("centisecs").value);
      if (isNaN(n1)) return;
      var n2 = Math.round(Math.random() * 600000);
    }
    gnDemo1 = n1;
    gnDemo2 = n2;
    getElementById("comp1").innerHTML = centisecsToISODuration(n1, bPrecise);
    getElementById("comp2").innerHTML = centisecsToISODuration(n2, bPrecise);
    getElementById("compOp").innerHTML = "" + n1 + "&nbsp;?&nbsp;" + n2;
    if (n1 == n2)
    {
      s1 = "A == B"
    }
    else if (n1 > n2)
    {
      s1 = "A > B"
    }
    else
    {
      s1 = "A < B"
    }
    getElementById("compResult").innerHTML = s1;

    getElementById("add1").innerHTML = centisecsToISODuration(n1, bPrecise);
    getElementById("add2").innerHTML = centisecsToISODuration(n2, bPrecise);
    getElementById("addResult").innerHTML = centisecsToISODuration((n1+n2), bPrecise);
    getElementById("addOp").innerHTML = "" + n1 + "+" + n2 + "=" + (n1+n2);
    if ((!bAllowBadSubtract) && (n2 > n1))
    {
      n = n1;
      n1 = n2;
      n2 = n;
    }
    getElementById("substr1").innerHTML = centisecsToISODuration(n1, bPrecise);
    getElementById("substr2").innerHTML = centisecsToISODuration(n2, bPrecise);
    getElementById("substrResult").innerHTML = centisecsToISODuration(n1-n2, bPrecise);
    getElementById("substrOp").innerHTML = "" + n1 + "-" + n2 + "=" + (n1-n2);
  }
}

function RefreshDateDemo(objDate)
{
  if (!objDate) objDate = new Date();
  var TSPlain = objDate.toString();
  var TSUTC = objDate.toGMTString();
  // Relative
  // Zulu
  var TSU = MakeISOtimeStamp(objDate,false,2);
  var TSU_0 = MakeISOtimeStamp(objDate,false,0);
  var TS1 = MakeISOtimeStamp(objDate,true,2);
  var TS1_0 = MakeISOtimeStamp(objDate,true,0);
  if ((TSU==null) || (TSU_0==null) || (TS1==null) || (TS1_0==null)) return;
  with (document)
  {
    getElementById("plainTime").innerHTML = TSPlain;
    getElementById("plainTimeUTC").innerHTML = TSUTC;
     getElementById("UTCTime").innerHTML = TSU;
    getElementById("UTCTime0").innerHTML = TSU_0;
     getElementById("offsetTime").innerHTML = TS1;
    getElementById("offsetTime0").innerHTML = TS1_0;
    var s = DateFromISOString(TS1);
    if (s == null) return;
    getElementById("plainTime2").innerHTML = s.toString();
    s = DateFromISOString(TSU);
    if (s == null)
    {
      alert(gsParseErr);
      return;
    }
    getElementById("plainTimeUTC2").innerHTML = s.toString();
    getElementById("manualTimeStamp").value = TSU;
  }
}

function TestManualTimeStamp()
{
  var s = document.getElementById("manualTimeStamp").value;
  var D = DateFromISOString(s);
  if (D == null)
  {
    alert("Oops. There is a problem:\n\n" + gsParseErr);
  }
  else
  {
    RefreshDateDemo(D)
  }
}

function RandomDateDemo()
{
  var D = new Date();
  var n = D.getTime();
  var nMs = Math.random() * n * 2;
  D.setTime(nMs)
  RefreshDateDemo(D)
}

function cs2iso()
{
  var n = parseFloat(document.getElementById("centisecs").value);
  if (isNaN(n))
  {
    alert ("Not a number");
    return;
  }
  n = Math.round(n);
  document.getElementById("centisecs").value = n;
  document.getElementById("secs").value = n/100; // Math.round(n / 100)
  var s = centisecsToISODuration(n)
  document.getElementById("iso").value = s;
  var s = centisecsToISODuration(n, true)
  document.getElementById("isoPrecise").value = s;
  document.getElementById("scorm12").value = centisecsToSCORM12Duration(n);
  arithmeticDemo()
}

function secs2iso()
{
  var n = parseFloat(document.getElementById("secs").value);
  if (isNaN(n))
  {
    alert ("Not a number");
    return;
  }
  n = (Math.round(n * 100)) / 100;
  document.getElementById("secs").value = n;
  document.getElementById("centisecs").value = Math.round(n * 100)
  var s = centisecsToISODuration(n * 100)
  document.getElementById("iso").value = s;
  var s = centisecsToISODuration(n * 100,true)
  document.getElementById("isoPrecise").value = s;
  document.getElementById("scorm12").value = centisecsToSCORM12Duration(n * 100);

  arithmeticDemo()
}

function iso2cs()
{
  var str = document.getElementById("iso").value;
  var n = ISODurationToCentisec(str)
  document.getElementById("centisecs").value = n
  document.getElementById("secs").value = n/100; // Math.round(n / 100);
  document.getElementById("scorm12").value = centisecsToSCORM12Duration(n)
  str = centisecsToISODuration(n, true);
  document.getElementById("isoPrecise").value = str;
  arithmeticDemo()
}

function isoPrecise2cs()
{
  var str = document.getElementById("isoPrecise").value;
  var n = ISODurationToCentisec(str)
  document.getElementById("centisecs").value = n
  document.getElementById("secs").value = n/100; // Math.round(n / 100);
  document.getElementById("scorm12").value = centisecsToSCORM12Duration(n);
  str = centisecsToISODuration(n);
  document.getElementById("iso").value = str;
  arithmeticDemo()
}

function oldform2cs()
{
  var str = document.getElementById("scorm12").value;
  n = SCORM12DurationToCs(str);
  if (!isNaN(n))
  {
    document.getElementById("iso").value = centisecsToISODuration(n);
    document.getElementById("isoPrecise").value = centisecsToISODuration(n,true);
    iso2cs();
  }
  arithmeticDemo()
}

function randomISO(bPrecise)
{
    var s = "P"
    with (Math)
    {
      if (bPrecise != true)
      {
        s += round(random() * 10) + "Y"
          + round(random() * 12) + "M"
          + round(random() * 30) + "D";
      }
      else
      {
        s += round(random() * 100);
      }
      s += "T" + round(random() * 24) + "H"
        + round(random() * 60) + "M"
        + round(random() * 6000)/100 + "S";
    }
    var str = document.getElementById("iso").value = s;
    iso2cs();
}

function randomCentiSecs()
{
  with (Math)
  {
    document.getElementById("centisecs").value = round(random() * 31557600000);
  }
  cs2iso();
}

function randomSmallCentiSecs()
{
  with (Math)
  {
    document.getElementById("centisecs").value = round(random() * 400000);
  }
  cs2iso();
}

function randomSecs(){
  with (Math)
  {
    document.getElementById("secs").value = round(random() * 3155760000);
  }
  secs2iso();
}

var gDatePageStartTime = null;

function ShowPageElapsedTime()
{
  var d = document.getElementById("PageElapsedTime");
  if (d)
  {
    var nCs = ((new Date()).getTime() - gDatePageStartTime.getTime())/10;
    d.innerHTML = '<table class="BodyText small" border="0" '
     + 'summary="Layout to show two formats of elapsed time">'
     + '<tr><td colspan="2">Time elapsed since this page was initialized:'
     + '<\/td><\/tr><tr><td>SCORM2004 format (ISO): '
     + '<\/td><td class="code">' + centisecsToISODuration(nCs)
     + '<\/td><\/tr><tr><td>SCORM 1.2 format: '
     + '<\/td><td class="code">'
     + centisecsToSCORM12Duration(nCs)
     + '<\/td><\/tr><\/table>';
  }
}

var gTimerPageElapsedTime = null;

function StartShowElapsedTime()
{
  gDatePageStartTime = new Date();
  gTimerPageElapsedTime = setInterval("ShowPageElapsedTime()",1883);
}

function StopShowElapsedTime()
{
  if (gTimerPageElapsedTime)
  {
    clearInterval (gTimerPageElapsedTime)
    gTimerPageElapsedTime = null;
  }
}


function showScript()
{
  LoadRemoteFile("ostynscormtime.js");
  //s = document.getElementById("reusableFunctions").text;
  //document.getElementById("reusableScriptDisplay").innerHTML = '<pre>' + s + '<pre>';
}

var XmlHttpReq;

function LoadRemoteFile(url)
{
  // Mozilla or IE use different ways to instantiate xmlHTTP object
  if (window.XMLHttpRequest)
  {
    XmlHttpReq = new XMLHttpRequest();
    XmlHttpReq.onreadystatechange = processReqChange;
    XmlHttpReq.open("GET", url, true);
    XmlHttpReq.send(null);
  }
  else if (window.ActiveXObject)
  {
    XmlHttpReq = new ActiveXObject("Microsoft.XMLHTTP");
    if (XmlHttpReq)
    {
      XmlHttpReq.onreadystatechange = processReqChange;
      XmlHttpReq.open("GET", url, true);
      XmlHttpReq.send();
    }
  }
}

function processReqChange()
{
  // only if XmlHttpReq shows "loaded"
  if (XmlHttpReq.readyState == 4)
  {
    if (XmlHttpReq.status == 200)
    {
      document.getElementById("reusableScriptDisplay").innerHTML = '<pre>' +
        trim(XmlHttpReq.responseText) + '<pre>';
    }
    else
    {
      var s = "There was a problem retrieving the script for display here: \n" +
        XmlHttpReq.statusText +
        "<br />Please use the Download link to download the script if you want to view it.";
      document.getElementById("reusableScriptDisplay").innerHTML = s;
    }
  }
}



function MakeScriptSampleBigger(){
  var obj = document.getElementById("reusableScriptDisplay");
  if (obj)
  {
    var n = parseInt(obj.style.fontSize);
    if (n < 24) n++;
    obj.style.fontSize = n + "pt";
  }
}
function MakeScriptSampleSmaller(){
  var obj = document.getElementById("reusableScriptDisplay");
  if (obj)
  {
    var n = parseInt(obj.style.fontSize);
    if (n > 7) n--;
    obj.style.fontSize = n + "pt";
  }
}
function BiggerFont(){
  var obj = (document.getElementsByTagName("body"))[0];
  if (obj)
  {
    var n = parseInt(obj.style.fontSize);
    if (n < 24) n++;
    obj.style.fontSize = n + "pt";
  }
}
function SmallerFont(){
  var obj = (document.getElementsByTagName("body"))[0];
  if (obj)
  {
    var n = parseInt(obj.style.fontSize);
    if (n > 7) n--;
    obj.style.fontSize = n + "pt";
  }
}

//]]>
</script>
  <link rel="STYLESHEET" href="ostyndoc2006.css" type="text/css" />
  <!--[if IE]>
  <link rel="STYLESHEET" href="ostyndocie2006.css" type="text/css" />
   <![endif]-->
  <link rel="STYLESHEET" href="ostynprint2006.css" type="text/css"
  media="print" />
<script src="rcdownload.js" type="text/javascript">
</script>
</head>

<body onload=
'RefreshDateDemo();showScript();InitEventHandling();StartShowElapsedTime();'
onunload='StopShowElapsedTime();'>
  <p><a name="top" id="top"></a></p>

  <div class="BodyText">
    <div id="backlink">
      <a href="http://www.ostyn.com/resources.htm">More
      Ostyn&nbsp;Consulting Resources</a>
    </div>

    <div class="RightSideBar" id="PageTOC">
      <p>In this document:</p>

      <ul>
        <li><a href="#overview">Overview</a></li>

        <li><a href="#durationfmt">ISO duration format</a></li>

        <li><a href="#timestampfmt">ISO time stamp format</a></li>

        <li><a href="#reusablescript">Reusable script</a></li>

        <li><a href="#download">Download script</a></li>

        <li><a href="#license">Script license</a></li>
      </ul>
    </div><a id="overview" name="overview"></a>

    <h1>ISO 8601 duration and time stamps in SCORM 2004</h1>

    <p class="Byline">Claude Ostyn, August 2006<br />
    Copyright &copy; 2004, 2005, 2006 Claude Ostyn</p>

    <h2>Overview</h2>

    <p class="BodyText">This document demonstrates the use of the ISO
    8601 duration and date-time (a.k.a. "time stamp") formats as
    used in SCORM 2004 and recommended by the IEEE 1484.11.1
    standard. It includes dynamic, interactive examples to show how
    different values are represented. It also explains how to do
    time related calculations based on ISO 8601 durations or time
    stamps. Because the number of days in a month varies, this may
    lead to loss of precision when representing durations.
    Practical workarounds are demonstrated to avoid this problem.
    The script of this page also contains reusable ECMAScript
    (a.k.a. JavaScript) functions to convert to and from the ISO
    8601 format.</p>

    <p class="Byline"><small>Tested with IE6 and FireFox 1.5.x.
    This page may not render correctly with some other
    browsers.</small></p>

    <div class="TopLink">
      <a id="durationfmt" name="durationfmt"></a><a href=
      "#top"><strong>^</strong> Top of page</a>
    </div>

    <h2>The ISO 8601 format for duration</h2>

    <p class="BodyText">Enter a value in any of the boxes below and
    click the Convert button next to it to see the corresponding
    representations. The ISO string must match the form<br />
    &nbsp; &nbsp; &nbsp; &nbsp; <span class=
    "code">P[yY][mM][dD][T[hH][mM][s[.s]S]]</span><br />
    where anything between <span class="code">[]</span> is
    optional, but there must be at least one field (Year, Month,
    Day, Hour, Minute or Second). You can also click a button to
    generate a random value.</p>

    <p class="BodyText">The error detection in this demo is not
    complete, and some incorrect forms that are not detected may
    produce incorrect results.</p>

    <p class="BodyText">Centiseconds are 1/100s of a second, which
    is the resolution required by the standard. If you attempt to
    enter finer values, they will be rounded to centiseconds. The
    conversion to ISO format is always canonical, e.g. days only
    have 24 hours, and zero values are not shown. If you enter a
    large number of seconds in ISO format, for example <span class=
    "code">PT310S</span>, and convert to seconds and then back, the
    second conversion will use the canonical format and thus you
    will end up with <span class="code">PT5M10S</span>. If you
    enter a value of 0 for seconds or centiseconds, the ISO string
    representation used here will be <span class=
    "code">PT0H0M0S</span> as specified by the SCORM 2004
    conformance requirements document. Although technically it
    seems that it could just be <span class="code">P</span>, one
    designator and value must be present in addition to the
    designator <span class="code">P</span> and so it should be at
    least <span class="code">PT0S</span> (PT, zero, S). However,
    the SCORM 2004 1.3.1 conformance test suite was coded to
    require the <span class="code">PT0H0M0S</span> format for the
    initial zero value of the total attempt time; using that format
    is therefore recommended where compatibility with early
    implementations of SCORM 2004 is required.</p>

    <div class="grpDemo">
      <form action="">
        <p class="BodyText"><input type="button" value=
        "Generate a random large value" onclick=
        "randomCentiSecs()" />&nbsp;<input type="button" value=
        "Generate a random small value" onclick=
        "randomSmallCentiSecs()" /></p>

        <table class="BodyText" border="0" summary="layout">
          <tr>
            <td align="right">Centiseconds:</td>

            <td nowrap="nowrap"><input id="centisecs" size=
            "14" />&nbsp;<input type="button" id="centisecsBtn"
            value="Convert" onclick="cs2iso()" /></td>
          </tr>

          <tr>
            <td align="right">Seconds:</td>

            <td><input id="secs" size="14" />&nbsp;<input type=
            "button" id="secsBtn" value="Convert" onclick=
            "secs2iso()" /></td>
          </tr>

          <tr>
            <td align="right">ISO:</td>

            <td width="80%"><input id="iso" size=
            "27" />&nbsp;<input type="button" id="isoBtn" value=
            "Convert" onclick="iso2cs()" /></td>
          </tr>

          <tr>
            <td align="right">ISO&nbsp;precise:</td>

            <td><input id="isoPrecise" size=
            "27" />&nbsp;<input type="button" id="isoPreciseBtn"
            value="Convert" onclick="isoPrecise2cs()" /></td>
          </tr>
        </table>

        <p class="BodyText"><small>(The ISO precise format does not
        use Year or Month)</small></p>
      </form>
    </div>

    <h4>Old format</h4>

    <p class="BodyText">SCORM 1.2 used the <span class=
    "code">HHHH:MM:SS[.SS]</span> format, which was superseded by
    the format recommended in the IEEE draft standard used in SCORM
    2004. Note that hour values above 9999 are lost in converting
    to SCORM 1.2 format.</p>

    <div class="grpDemo">
      <p class="BodyText">SCORM 1.2: <input id="scorm12" size=
      "27" /><input type="button" id="scorm12Btn" value="Convert"
      onclick="oldform2cs()" /></p>
    </div>

    <h4>Duration samples</h4>

    <div id="PageElapsedTime">
      <table class="BodyText" border="0" summary=
      "duration samples table">
        <tr>
          <td colspan="2">Elapsed time samples:</td>
        </tr>

        <tr>
          <td>SCORM2004 format (ISO):</td>

          <td>PT26.4S</td>
        </tr>

        <tr>
          <td>SCORM 1.2 format:</td>

          <td>0000:00:26.40</td>
        </tr>
      </table>
    </div>

    <h3>Duration arithmetic</h3>

    <h4>Precision issues with long durations</h4>

    <p class="BodyText">If necessary, the number of days in a month
    can calculated by approximation, using the formula<br />
    <span class="code">1 month = ((365 * 4) + 1)/48
    days</span><br />
    to calculate the average months per day in any 4 year period,
    because a precise calculation is impossible without knowing
    dates and times. As a result, there may be a loss of precision
    in reciprocal conversions when the duration exceeds 28 days,
    unless the precise ISO form that uses neither Year nor Month
    fields is used. For example, entering <span class=
    "code">P35D</span> and converting to centiseconds and back
    using a ISO canonical format with a Month field results in
    <span class="code">P1M4DT13H30M</span>, which does not look
    like whole days. But if the conversion to centiseconds and back
    is done without using a precise ISO format Month fields, the
    result is exactly the same: <span class="code">P35D</span>. It
    cannot be assumed that different implementers will use the same
    approximation formula if it is necessary to calculate Month or
    Year values represented in an ISO format string.</p>

    <p class="BodyText">Because of the variable number of days in a
    month or a year, precise duration arithmetic is very complex
    when a duration is expressed using Month and/or Year fields. A
    precise time and date reference is required, and you must know
    when the duration occured relative to that time and date. This
    can be further complicated by having to take into account the
    time zone, daylight savings time, and so on. The W3C
    Recommendation for XML Schema includes a <a href=
    "http://www.w3.org/TR/xmlschema-2/#adding-durations-to-dateTimes"
    target="_blank" class="external">specification</a> of how to do
    this kind of calculation to add durations to date-time
    values.</p>

    <p class="BodyText">So, if you want to do precise duration
    arithmetic but avoid this kind of complexity, the ISO string
    should use neither Year nor Date fields. Instead, the duration
    should be expressed in days, hours, minutes and/or seconds
    because the relationship between those data elements is fixed.
    If the number of days is higher than 28, just use a large
    number of days; for example, <span class="code">P45D</span> is
    a conformant ISO representation for a long duration. Or you
    could use some other pattern with one or more fields, such as a
    seconds field with a very large value.</p>

    <h4>Examples of duration arithmetic</h4>

    <p class="BodyText">The examples below convert the ISO values
    to centiseconds. The addition and substraction then convert the
    result back to ISO. Because the same approximation method is
    used to calculate days in a month, the result is predictable
    for very long durations even if the ISO string format is not
    the "precise" format that does not use Year or Month. You can
    verify this by looking at the centisecond values extracted from
    the ISO string values. However, if the ISO string contains a
    Year or Month field, the same operation might not produce the
    same result in another implementation because that other
    implementation may use another approximation method.</p>

    <div class="grpDemo">
      <p class="BodyText"><input type="button" value=
      "Generate random large values" onclick=
      "randomCentiSecs()" />&nbsp;<input type="button" value=
      "Generate random small values" onclick=
      "randomSmallCentiSecs()" /> <input type="checkbox" id=
      "UsePreciseForm" value="UsePreciseForm" onchange=
      "arithmeticDemoFlipFormat()" />&nbsp;Use&nbsp;precise&nbsp;ISO&nbsp;format
      <small><small><a href=
      "javascript:alert('Precise%20ISO%20format%20uses%20number%20of%20days%20if%20the%20duration%20is%2024%20hours%20or%20more,%20but%20does%20not%20use%20number%20of%20months%20or%20years%20to%20avoid%20the%20problem%20of%20variable%20number%20of%20days%20in%20a%20month%20or%20a%20year.%20In%20this%20format,%20the%20number%20of%20days%20can%20be%20much%20larger%20than%2031.%20\n\nFor%20durations%20under%2029%20days,%20there%20is%20no%20difference%20between%20the%20precise%20format%20and%20the%20more%20traditional%20format,%20since%20the%20number%20of%20months%20and%20years%20is%20always%200%20in%20that%20case,%20and%20therefore%20the%20month%20and%20year%20elements%20can%20be%20omitted%20from%20the%20string.%20\n\nBoth%20formats%20conform%20to%20the%20W3C%20profile%20of%20the%20ISO%20standard.')">
      Explain</a></small></small></p>

      <table class="BodyText" summary=
      "Layout for arithmetic examples" cellspacing="0" cellpadding=
      "10" border="0">
        <tr>
          <th class="deep">Operation</th>

          <th class="deep">Value 1</th>

          <th class="deep">&nbsp;</th>

          <th class="deep">Value 2</th>

          <th class="deep">&nbsp;</th>

          <th class="deep">Result</th>

          <th class="deep">&nbsp;</th>

          <th class="deep">Behind the scene (centiseconds)</th>
        </tr>

        <tr>
          <th class="deep">Addition</th>

          <td><span id="add1" class="code">&nbsp;</span></td>

          <td align="center">+</td>

          <td><span id="add2" class="code">&nbsp;</span></td>

          <td align="center">=</td>

          <td><span id="addResult" class="code">&nbsp;</span></td>

          <td>&nbsp;</td>

          <td class="deep"><span id="addOp" class=
          "code"><span class="BodyText">Click a button above to
          generate some values</span></span></td>
        </tr>

        <tr>
          <th class="deep">Subtraction</th>

          <td><span id="substr1" class="code">&nbsp;</span></td>

          <td align="center">-</td>

          <td><span id="substr2" class="code">&nbsp;</span></td>

          <td align="center">=</td>

          <td><span id="substrResult" class=
          "code">&nbsp;</span></td>

          <td>&nbsp;</td>

          <td class="deep"><span id="substrOp" class=
          "code">&nbsp;</span></td>
        </tr>

        <tr>
          <th class="deep">Comparison</th>

          <td><span id="comp1" class="code">&nbsp;</span></td>

          <td>?</td>

          <td><span id="comp2" class="code">&nbsp;</span></td>

          <td nowrap="nowrap">-&gt;</td>

          <td><span id="compResult" class="code">&nbsp;</span></td>

          <td>&nbsp;</td>

          <td class="deep"><span id="compOp" class=
          "code">&nbsp;</span></td>
        </tr>
        <!-- <tr><td colspan="8" class="deep">&nbsp</td></tr> -->
      </table>
    </div>

    <div class="TopLink">
      <a id="timestampfmt" name="timestampfmt"></a><a href=
      "#top"><strong>^</strong> Top of page</a>
    </div>

    <h2>The ISO 8601 format for time stamp</h2>

    <p class="BodyText">A time stamp is a data value representing a
    "point in time".</p>

    <p class="BodyText">When time stamp values must be exchanged, a
    standard representation for the value must be used to allow
    interoperability. This representation must be totally
    predictable, and it must work in any time zone and regardless
    of whether daylight savings time is in effect. The ISO 8601
    standard defines such a representation, and SCORM 2004 requires
    that time stamp data be passed as an ISO 8601 conformant
    string. Using the SCORM profile for the ISO 8601 standard, the
    string must match the form<br />
    &nbsp; &nbsp; &nbsp; &nbsp; <span class=
    "code">YYYY[-MM[-DD[Thh[:mm[:ss[.s]]][TZD]]]]</span><br />
    where anything between <span class="code">[]</span> is
    optional. Notice how the character <span class="code">T</span>
    is used as separator between year, month, day and the time of
    day.</p>

    <p class="BodyText">Only the four-digit year is required. In
    practice, time stamps used in the SCORM communication data
    model will usually contain more detailed information, because
    it is unlikely that a time stamp will be generated for 0 hours
    0 minute 0 second on the first of January of a particular year.
    However, you might find such an abbreviated time stamp in the
    metadata, for example to represent a publication year. The
    optional value represented by <span class="code">TZD</span> in
    the pattern is a reference to Universal Coordinated Time (UTC).
    The TZD value designates the time zone assumed in the time
    stamp. This is expressed as a positive or negative time offset
    in hours and possibly minutes, or by the value <span class=
    "code">Z</span> which means "zero offset from UTC". See
    examples below. Such a reference to UTC is often necessary for
    interoperability; it is however allowed only if there is a time
    component in the string.</p>

    <div class="ref note">
      <p class="BodyText">Note that there is a small issue with the
      SCORM 2004 conformance requirements document. The requirement
      states that the pattern is<br />
      &nbsp; &nbsp; &nbsp; &nbsp; <span class=
      "code">YYYY[-MM[-DD[Thh[:mm[:ss[.s]TZD]]]]]]]</span><br />
      While technically incorrect, this is required for conformance
      with the IEEE 1484.11.1 standard, which in turn inherited
      this from a typo from the IEEE 1484.12.1:2004 standard. This
      is a generally harmless error since it won't cause anyone to
      lose data. The ADL technical team is aware of this issue.
      Watch the ADL knowledge base and corrigenda for a future
      official correction.</p>

      <p class="BodyText">There is no need to wait for a
      correction, though. The simplest way to deal with this is to
      include hundreds of seconds whenever you include a timezone
      designator. For example, something like<br />
      &nbsp; &nbsp; &nbsp; &nbsp; <span class=
      "code">2004-04-01T09:45:58.00Z</span><br />
      is valid today according to the SCORM test suite, and will
      still be valid the future if the error is ever corrected. In
      any case, fully specifying a time stamp with zero values for
      the various components is harmless.</p>
    </div>

    <p class="BodyText">The ECMAScript (JavaScript) interpreters in
    different browsers use a standard <span class=
    "code">Date</span> object to represent a time stamp value. This
    object is not a string, but it can be rendered as a string by
    the ECMAString <span class="code">toString()</span> function.
    Unfortunately, different browsers use different display formats
    for the string rendering of a <span class="code">Date</span>
    object. This is how the ECMAScript <span class=
    "code">Date</span> object in your browser represents the same
    point in time when asked to display it as a string, using two
    different methods:</p>

    <table class="BodyText" width="100%" border="0" cellspacing="0"
    cellpadding="0" summary=
    "Table showing ECMAScript time stamp formats">
      <tr>
        <td nowrap="nowrap">Local time using
        method&nbsp;Date.toString( ):</td>

        <td nowrap="nowrap" width="70%"><span id="plainTime" class=
        "code">?</span></td>

        <td rowspan="2">&nbsp;</td>
      </tr>

      <tr>
        <td nowrap="nowrap">Universal time using method
        Date.toGMTString( ):&nbsp;</td>

        <td nowrap="nowrap"><span id="plainTimeUTC" class=
        "code">?</span></td>
      </tr>
    </table>

    <h4>Time stamp examples</h4>

    <div class="grpDemo">
      <table class="BodyText" summary="edit option" width="100%"
      border="0">
        <tr>
          <td>Time stamp values are best generated by the computer:
          <input type="button" name="Update" value="Now" onclick=
          "RefreshDateDemo()" />&nbsp;<input type="button" name=
          "Random" value="Random" onclick=
          "RandomDateDemo()" />.</td>
        </tr>

        <tr>
          <td>You can also edit this ISO format time stamp or
          create a new one: <input id="manualTimeStamp" size=
          "27" />&nbsp;<input type="button" id=
          "TestManualTimeStampBtn" value="OK" onclick=
          "JavaScript:TestManualTimeStamp()" /></td>
        </tr>
      </table>
    </div>

    <p class="BodyText">There are different ways to represent the
    same "point in time", as shown in the following table:</p>

    <div class="grpDemo">
      <table class="BodyText" width="100%" border="0" summary=
      "Table showing different time stamp formats">
        <tr>
          <td width="20%" nowrap="nowrap"></td>

          <th width="40%" class="deep">UTC time (Coordinated
          Universal Time, a.k.a. "Zulu"&nbsp;time)</th>

          <th width="40%" class="deep">Local time with offset from
          UTC time</th>
        </tr>

        <tr>
          <th class="deep">Precision = 0.01&nbsp;second</th>

          <td><span id="UTCTime" class=
          "code">2005-02-16T19:45:11Z</span></td>

          <td><span id="offsetTime" class=
          "code">2005-02-16T19:45:11Z</span></td>
        </tr>

        <tr>
          <th class="deep">Precision = 1&nbsp;second</th>

          <td><span id="UTCTime0" class=
          "code">2005-02-16T11:45:10.97-08</span></td>

          <td><span id="offsetTime0" class=
          "code">2005-02-16T11:45:11-08</span></td>
        </tr>
      </table>
    </div>

    <h4>Validating the script conversions</h4>

    <p class="BodyText">The script of this page generates the ISO
    strings in the table above. For verification, the script also
    translates the ISO strings back to a JavaScript Date object by
    calling methods of the Date object with the date and time
    values. Doing these reverse conversions with a variety of time
    stamp values is very helpful in verifying that the scripts that
    perform the conversions work correctly:</p>

    <p class="BodyText">The strings below are generated by doing a
    reverse conversion from the ISO format back to a JavaScript
    Date object, and asking JavaScript to display the Date.</p>

    <div class="grpDemo">
      <table class="BodyText" width="100%" border="0" cellspacing=
      "0" cellpadding="0" summary=
      "Table showing ECMAScript time stamp formats">
        <tr>
          <td nowrap="nowrap">From the time offset
          format:&nbsp;</td>

          <td width="80%"><span id="plainTime2" class=
          "code">?</span></td>
        </tr>

        <tr>
          <td nowrap="nowrap">From the "Zulu" format:&nbsp;</td>

          <td><span id="plainTimeUTC2" class="code">?</span></td>
        </tr>
      </table>
    </div>

    <p class="BodyText">Note that you might observe a discrepancy
    of up to one second between the ISO string and the string
    rendered by the Date object, due to loss of precision in the
    conversion. This is not an error.</p>

    <h3>Time stamp arithmetic</h3>

    <h4>Calculating elapsed time since a specific time stamp</h4>

    <p class="BodyText">The easiest way to calculate an ISO 8601
    duration as elapsed since a given time stamp in ECMAScript is
    probably to create two Date objects, one for the time stamp,
    and one for "now", and set the value of the first Date object
    to match the given time stamp. Then use the Date.getTime()
    function to extract a millisecond value from each and calculate
    the difference. This will automatically take into account time
    zones and daylight savings time changes that might have
    occurred between the two dates and times. You can then convert
    the result to an IS0 8601 duration string. Obviously, if the
    original time stamp does not include a TZD the result will be
    correct only if the original time stamp is relative to the same
    time zone. Note that ECMAScript Date objects cannot be used
    this way for dates earlier than January 1, 1970.</p>

    <h4>Calculating duration between two time stamps</h4>

    <p class="BodyText">The easiest way to calculate an ISO 8601
    duration from two time stamps in ECMAScript is probably to
    create two Date objects, one for each time stamp, and set their
    values accordingly. Then use the Date.getTime() function to
    extract a millisecond value from each and calculate the
    difference. This will automatically take into account time
    zones and daylight savings time changes that might occur
    between the two dates and times. You can then convert the
    result to an IS0 8601 duration string. Obviously, if the time
    stamps do not include a TZD the result will be correct only if
    the time stamps are relative to the same time zone. Note that
    ECMAScript Date objects cannot be used this way for dates
    earlier than January 1, 1970.</p>

    <h4>Resources</h4>

    <p class="BodyText">There are many web pages devoted to time
    calculations. A particularly interesting one if you have a few
    hours to kill can be found at <a href=
    "http://www.merlyn.demon.co.uk/js-dates.htm" target="_blank"
    class=
    "external">http://www.merlyn.demon.co.uk/js-dates.htm</a>.</p>
    <hr />

    <div class="TopLink">
      <a name="reusablescript" id="reusablescript"></a><a href=
      "#top"><strong>^</strong> Top of page</a>
    </div>

    <h2>Demonstration script</h2>

    <p class="BodyText">The reusable functions used to perform the
    conversions demonstrated on this page are contained in the
    script below. For example, to make an ISO time stamp string as
    expected by SCORM for "now", in ECMAScript (a.k.a. JavaScript)
    you would use something like</p>

    <p class="scriptSample">var objDate = new Date();</p>

    <p class="BodyText">to capture the point in time, then call</p>

    <p class="scriptSample">MakeISOtimeStamp(objDate)</p>

    <p class="BodyText">to get a UTC timestamp (Zulu time),
    e.g.</p>

    <p class="scriptSample"><script language="JavaScript" type=
    "text/javascript">
//<![CDATA[
var gObjNow = new Date();
document.write(MakeISOtimeStamp(gObjNow) );
//]]>
</script></p>

    <p class="BodyText">or</p>

    <p class="scriptSample">MakeISOtimeStamp(objDate, true)</p>

    <p class="BodyText">to get a time stamp with a UTC offset,
    e.g.</p>

    <p class="scriptSample"><script language="JavaScript" type=
    "text/javascript">
//<![CDATA[
document.write(MakeISOtimeStamp(gObjNow, true) );
//]]>
</script></p>

    <div class="TopLink">
      <a name="download" id="download"></a><a href=
      "#top"><strong>^</strong> Top of page</a>
    </div>

    <h2>Download</h2>

    <p class="BodyText">Please read the no nonsense <a href=
    "#license">License and terms of use</a> below before
    downloading or using this script. By downloading or using this
    software you signify your agreement with the license and terms
    of use.</p>

    <p class="BodyText"><a href="ostynscormtime.js" onclick=
    "JavaScript:RightClickInstructions(this.href);return false;">Right-click
    here</a> to download ostynscormtime.js. <noscript>
    <p class="BodyText">The following alternative download link is
    provided because scripting is not available in your browser:
    <a href=
    "ostynscormtime.js">ostynscormtime.js</a>.</p></noscript></p>

    <div class="TopLink">
      <a name="license" id="license"></a><a href=
      "#top"><strong>^</strong> Top of page</a>
    </div>

    <h2>License and terms of use</h2>

    <p class="BodyText"><a rel="license" href=
    "http://creativecommons.org/licenses/by-sa/2.5/"><img alt=
    "Creative Commons License" border="0" src=
    "http://creativecommons.org/images/public/somerights20.png" /></a>
    This work is licensed under a <a rel="license" href=
    "http://creativecommons.org/licenses/by-sa/2.5/">Creative
    Commons Attribution-ShareAlike2.5 License</a>.<br />
    USE AT YOUR OWN RISK<br />
    THIS SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY
    KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE
    WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE
    AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHOR OR COPYRIGHT
    HOLDER BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,
    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR
    OTHER DEALINGS IN THE SOFTWARE.</p>

    <div id="reusableScriptDisplay" class="scriptSample code">
    </div>

    <div class="backlink">
      <a href="http://www.ostyn.com/resources.htm">More
      Ostyn&nbsp;Consulting Resources</a>
    </div>
  </div>
</body>
</html>
