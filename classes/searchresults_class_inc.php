<?php

// security check - must be included in all scripts
if (!$GLOBALS['kewl_entry_point_run']) {
    die("You cannot view this page directly");
}
// end security check

/**
 * Results class controls results generated by lucene
 *
 * @author Wesley Nitsckie
 * @copyright AVOIR UWC
 * @access public
 * @package lucene
 */

class searchresults extends object
{


	/**
	 * Configuration object
	 *
	 * @var object
	 */
	public $objConfig;


	/**
	 * Instantiated search object
	 *
	 * @var object
	 */
	public $search;


	/**
	* Constructor
	*/
	public function init()
	{
		// instantiate objects
        try{
			//the language object
        	$this->objLanguage = $this->getObject('language','language');
        	//the config object
        	$this->objConfig = $this->getObject('altconfig','config');
       	}
        //catch any exceptions that may have occured and pass them to the error handler
        catch (customException $e){
        	//output the standard error page
       		echo customException::cleanUp($e);
       		//kill the script to suppress any further errors
        	exit();
        }

	}


	/**
	* Method to show the results
	* @access public
	* @return string
	* @author Wesley Nitsckie
	* @param
	*/

	public function show($query)
	{
		$this->requiresLogin = FALSE;
		try{
			//$query = $this->getParam('query');
	    	$this->search = new Zend_Search_Lucene($this->objConfig->getcontentBasePath().'/newsIndex');
	    	//$str = "Searching " . $this->search->count() . " Documents <br /><br />";
	    	//clean the query
	    	$query = trim(strtolower($query));

	    	if (strlen($query) > 0) {
				$hits = $this->search->find($query);
					//print_r($hits);
				$numHits = count($hits);
			}
            
			return $this->_displayResults($hits);

		 }
        //catch any exceptions that may have occured and pass them to the error handler
        catch (customException $e){
        	//output the standard error page
       		echo customException::cleanUp($e);
       		//kill the script to suppress any further errors
        	exit();
        }
	}


	/**
	* Method to format the display of the results
	* @param array @arrResults The result set
	* @return string the formatted results
	* @access private
	*/
	private function _displayResults($arrResults=null)
	{
        
        if(count($arrResults) == 0)
		{
			$str ='<h1>Search Results</h1>
						<h5>'.count($arrResults).' Hits found</h5>
					<div id="resultslist-wrap"></div>
						';
			return $str;
		}
		$str = '<hr />';
		$hitsPerPage = 10;
		$pagesPerSlide = ceil(count($arrResults)/5);

		//get the page number
		$pageno = (!$this->getParam('pageno') == '') ? $this->getParam('pageno') : 1;

		//setup prvious link
		if($pageno == 1)
		{
			$str .=	'<div class="pagination"><p>'; //<div class="pagination"><p><span><strong>Previous</strong></span>';
		} else {
			$str .=	'<div class="pagination"><p><a href="'.$this->uri(array('query' => $this->getParam('query'), 'pageno' => $pageno - 1), '_default').'"><strong>Previous</strong></a>';
		}

		//show the page slide
		for($i = 1 ; $i < $pagesPerSlide ; $i++)
		{
			if($i == $pageno)
			{
				$str .= $i;
			} else {
				$str .=	'  <a href="'.$this->uri(array('query' => $this->getParam('query'), 'pageno' => $i)).' ">'.$i.'</a>';
			}
		}


		//the next button
//print $pagesPerSlide;
$pno = $pageno+1;
		if($pno = $pagesPerSlide || $pagesPerSlide == 0){

			$str .= '</p>';
		} else {

			$str .='<a href="'.$this->uri(array('query' => $this->getParam('query'), 'pageno' => $pageno + 1)).'"><strong>Next</strong></a></p>';
		}

		//other info
		$outof = ($pagesPerSlide == 1) ? 1 :($pagesPerSlide - 1);
		$str .='			<h4>Page '.$pageno.' of '. $outof  .'</h4>
						</div>

						<hr />

						<h1>Search Results</h1>
						<h5>'.count($arrResults).' Hits found</h5>
					<div id="resultslist-wrap"><ul>
						';

		//the array index
		if ($pageno == 1)
		{
			$indx = 0;
		} else {
			$indx = $pageno * $hitsPerPage;
		}


		//loop through the array
		$i = 0;
		while( $i < $hitsPerPage )
		{
			if ( @is_object($arrResults[$indx + $i]))
			{
				$url = $arrResults[$indx + $i]->url;
				$url = str_replace('&amp;', '&', $url);
				$str .='

						<li>
							<dl>
								<dt>'. ($indx + $i + 1) .' . <a href="'.$url.'"> '.$arrResults[$indx + $i]->title.'</a></dt>
								<!--<dd class="desc">/*.$arrResults[$indx + $i]->teaser.*/</dd-->
								<dd class="filetype">HTML</dd>
								<dd class="date">'.$arrResults[$indx + $i]->date.'</dd>
								<dd class="date">Rating : '.$arrResults[$indx + $i]->score.'</dd>
							</dl>
						</li>';
			}
			$i++;

		}
			$str .='	</ul>
					</div>';

		return $str;
	}

}
?>