<?// security check - must be included in all scriptsif (!$GLOBALS['kewl_entry_point_run']) {    die("You cannot view this page directly");}// end security check/** * The class that demonstrates how to use the KEWL.NextGen * architecture by providing a hello wold example. * * @author Jeremy O'Connor * @author Nic Appleby * * * $Id: pofile_class_inc.php,v 1.10 2006/12/06 09:15:47 nic Exp $ * */class pofile extends dbtable {    var $objConfig;    public function init() {        parent::init('tbl_en');        $this->objConfig = $this->getObject('config', 'config');        $this->objUser = $this->getObject('user', 'security');        $this->zip = $this->getObject('wzip', 'utilities');        $this->objModules = $this->getObject('modules', 'modulecatalogue');        $this->objLanguage = $this->getObject('language', 'language');    }    public function parse($str) {        $result = '';        $len = strlen($str);        $i = 0;        while ($i < $len) {            $char = $str[$i];            if ($char == '"') {                $result .= '\\' . '"';            } else if (ord($char) == 10) {                            } else if (ord($char) == 13) {            } else {                $result .= $char;            }            $i++;        } // while        return $result;    }    public function exportAll($path, $langTable) {        // make directory        preg_match('/tbl_(.*)/', $langTable, $match);        $poName = "po_{$match['1']}";        $langPath = "{$path}$poName";        if (!file_exists($langPath)) {            mkdir($langPath);        }        if (file_exists("$langPath.zip")) {            unlink("$langPath.zip");        }        // get list of modules        $modList = $this->objModules->getAll();        $modList[]['module_id'] = "system";        // export each module to new directory        $fileList = array();        foreach ($modList as $module) {            $this->exportModule("$langPath/", $module['module_id'], $langTable);            $fileList[] = "$langPath/{$match['1']}_{$module['module_id']}.po";        }        // archive directory        $zipFN = $this->zip->addArchive($fileList, "$langPath.zip", $langPath);        // remove directory        foreach ($fileList as $file) {            unlink($file);        }        rmdir($langPath);        // return archive path        return "$poName.zip";    }    public function exportModule($path, $moduleId, $langTable) {        preg_match('/tbl_(.*)/', $langTable, $match);        $fName = "{$match[1]}_{$moduleId}.po";        $langFile = "{$path}{$fName}";        /* if (!$this->tableExists($langTable)) {          return FALSE;          } else { */        $stmt = "            SELECT                 $langTable.id AS code,                 $langTable.en AS content,                tbl_languagetext.description AS description            FROM                $langTable, tbl_languagetext            WHERE                $langTable.id = tbl_languagetext.code AND $langTable.pageid = '$moduleId'            ";        $array = $this->getArray($stmt);        /*          $element = $array[0];          $content = $element['Content'];          for ($i=0;$i<strlen($content);$i++) {          echo '['.ord($content[$i]).']';          }         */        $fd = fopen($langFile, 'wb');        foreach ($array as $element) {            $msgid = $element['code'];            $msgstr = $element['content'];            $description = $element['description'];            $str =                    '# ' . $this->parse($description) . chr(10)                    . 'msgid "' . $this->parse($msgid) . '"' . chr(10)                    . 'msgstr "' . $this->parse($msgstr) . '"' . chr(10)                    . chr(10);            fputs($fd, $str);        }        fclose($fd);        return $fName;        //}    }    /**     * This function finds the difference between English and a selected language and     * exports it into a pofile for translation     *     */    function exportDifference($langName) {        $langFile = $this->getLangFile($langName);        $langTable = $this->getLangTable($langName);        if ($this->tableExists($langTable)) {            $sql = "SELECT tbl_english.code, tbl_english.Content, tbl_languagetext.description        			FROM tbl_english, tbl_languagetext WHERE tbl_english.code = tbl_languagetext.code         			AND NOT EXISTS (SELECT code FROM $langTable WHERE tbl_english.code = $langTable.code)";            $fd = fopen($langFile, 'a');        } else {            $sql = "SELECT tbl_english.code, tbl_english.Content, tbl_languagetext.description        			FROM tbl_english, tbl_languagetext WHERE tbl_english.code = tbl_languagetext.code";            $fd = fopen($langFile, 'w');        }        $rs = $this->getArray($sql);        //echo count($rs)."<br>";        foreach ($rs as $record) {            $line = "# Comment: " . $this->parse($record['description']) . chr(10) .                    "# English: " . $this->parse($record['Content']) . chr(10) .                    'msgid "' . $this->parse($record['code']) . '"' . chr(10) .                    'msgstr ""' . chr(10)                    . chr(10);            //echo str_replace(chr(10),'<br>',$line);            fputs($fd, $line);        }        fclose($fd);        return $langFile;    }    /**     * Method to import a module translation into Chisimba from a PO File     *     * @param string $langName the name of the language to import     * @param string $module the module id of the module     * @param string $poFile the path of the pofile to import     * @author Nic Appleby     * @access public     */    public function importPOFile($langName, $module, $poFile) {        $tableName = strtolower($langName);        $langName = ucfirst($tableName);        $tableName = "tbl_$tableName";        $langCheck = $this->objLanguage->getRow('languagename', $langName);        if (!$langCheck) {            log_debug("create langauge: $langName");            $this->objLanguage->insert(array('languagecode' => $tableName, 'languagename' => $langName));            //Options line for comments, encoding and character set            $options = array('comment' => "$langName language table", 'collate' => 'utf8_general_ci', 'character_set' => 'utf8');            // Fields            $fields = array(                'id' => array(                    'type' => 'text',                    'length' => 50,                ),                'en' => array(                    'type' => 'clob'                ),                'pageid' => array(                    'type' => 'text',                    'length' => 150                ),                'isinnextgen' => array(                    'type' => 'text',                    'length' => 10                ),                'datecreated' => array(                    'type' => 'date'                ),                'creatoruserid' => array(                    'type' => 'text',                    'length' => 25,                ),                'datelastmodified' => array(                    'type' => 'date'                ),                'modifiedbyuserid' => array(                    'type' => 'text',                    'length' => 25,                ),            );            $objModuleAdmin = $this->getObject('modulesadmin', 'modulecatalogue');            log_debug("create table $tableName now");            $objModuleAdmin->createTable($tableName, $fields, $options);        }        parent::init($tableName);        $now = date("Y-m-d");        $uid = $this->objUser->userId();        $fd = fopen($poFile, 'rb');        //var_dump ($fd);        while (!feof($fd)) {            $line = fgets($fd, 65535);            if ($line[0] == '#')                continue;            if (preg_match('/msgid "(.*)"/i', $line, $match)) {                $line = fgets($fd, 65535);                preg_match('/msgstr "(.*)"/i', $line, $strmatch);                //echo "{$match[1]} - {$strmatch[1]} <br>";                if ($match[1] != '') {                    $content = str_replace("'", "\'", $strmatch[1]);                    if ($exists = $this->getRow('id', $match[1])) {                        $this->update('id', $match[1], array('en' => $content, 'pageid' => $module, 'isinnextgen' => '1', 'datelastmodified' => $now, 'modifiedbyuserid' => $uid));                    } else {                        $this->insert(array('id' => $match[1], 'en' => $content, 'pageid' => $module, 'isinnextgen' => '1', 'datecreated' => $now, 'creatoruserid' => $uid));                    }                }            }        }    }    public function importPOFileArchive($lang, $file) {        // unzip archive        // for each file match module name and filename        $this->importPOFile($lang, $module, $poFile);    }}?>