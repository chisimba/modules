<?xml version="1.0"?>
<!--
   $Id$

   Copyright (C) GNU/GPL AVOIR 2007
   This program is free software; you can redistribute it and/or modify
   it under the terms of the GNU General Public License as published by
   the Free Software Foundation; either version 2 of the License, or
   (at your option) any later version.

   This program is distributed in the hope that it will be useful,
   but WITHOUT ANY WARRANTY; without even the implied warranty of
   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
   GNU General Public License for more details.

  You should have received a copy of the GNU General Public License
  along with this program; if not, write to the Free Software
  Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
-->
<project name="modules"  basedir="." default="buildcode">

  <!-- the properties below can be customised to suit your own environment by providing a 
       build.properties file and overriding them -->
  
  <!-- local location that will contain the archives generated by this build -->
  <property name="build.dir" value="build"/>
  <!-- version string that will get appended to archive file names -->
  <property name="version" value="nightly"/>
  <!-- base module archive name (i.e. without file suffix and version string) -->
  <property name="base.archive.file.name" value="chisimba_modules_${version}"/>
  <!-- local folder where the built archives will be copied to during deployment -->
  <property name="local.deploy.dir" value="/var/www/chisimba_nightly"/>
  
  <!-- the properties below here shouldn't typically be overridden or changed -->
  
  <!-- name of framework tar file generated by build -->
  <property name="tarfile" value="${build.dir}/${base.archive.file.name}.tgz"/>
  <!-- name of framework zip file generated by build -->
  <property name="zipfile" value="${build.dir}/${base.archive.file.name}.zip"/>
  
  <!-- Lets set up the svn export and directory for the modules build -->
  <property name="modexportdir"  value="${build.dir}/modules/" />
  <property name="modsvnpath" value="/usr/bin/svn" />
  <property name="modusername" value="anon" />
  <property name="modpassword" value="anon" />
  <property name="modrepo" value="https://cvs2.uwc.ac.za/chisimba/modules/trunk/" />
 
  <!-- FTP properties -->
  <property name="ftp.host" value="207.45.176.90" />
  <property name="ftp.port" value="21" />
  <property name="ftp.username" value="paulscot" />
  <property name="ftp.password" value="pongid56" />
  <property name="ftp.dir" value="/public_html/packageserver/packages/" />
  <property name="ftp.mode" value="null" />
  <property name="ftp.clearFirst" value="true" />  
    
  <!-- set of files that should and shouldn't end up in module archive files generated by build -->
  <fileset dir="${build.dir}/modules/" id="modarchive.files">
    <!-- here we want pretty much everything -->
    <include name="**/**"/>
    <exclude name="realtime/*" />
    <exclude name="documentconverter/*" />
    <exclude name="mcqtests/*" />
    <exclude name="librarysearch/*" />
    <exclude name=".svn" />
  </fileset>
  
  <tstamp>
        <format property="build.time" pattern="%Y-%m-%d %H:%I" />
  </tstamp>
  
  <taskdef name="twitterupdate" classname="phing.tasks.my.TwitterUpdateTask" />
  
  <!-- Twitter status update target -->
  <target name="tweet">
      <twitterupdate
          username="paulscott56" password="pongid56"
          message="${twitter.status}" />
  </target>
  
  <target name="clean" description="Removes any files generated by this build">
    <delete dir="${build.dir}" includeemptydirs="true"  verbose="true"/>
  </target>
  
  <target name="init" description="Performs any initialisation steps required by this build">
    <mkdir dir="${build.dir}"/>
    <mkdir dir="${build.dir}/modules" />
    <mkdir dir="final" />
  </target>
  
  <!-- SVN export the modules -->
  <target name="modsvnexport">
    <svnexport
       svnpath="${modsvnpath}"
       username="${modusername}"
       password="${modpassword}"
       nocache="true"
       force="true"
       repositoryurl="${modrepo}"
       todir="${modexportdir}"/>
  </target>
  
  <!-- Start the actual build(s) -->
  <!-- Target to do a more lightweight build of only the code -->
  <target name="buildcode" description="Generates .tgz and .zip file containing the modules" 
	  depends="init, lint, modbuild-tgz, modbuild-zip, deploy-remotemodfiles" >
  </target>
  <!-- Target to do a more lightweight build of only the code -->
  <target name="buildremote" description="Generates .tgz and .zip file containing the modules" 
	  depends="init, lint, deploy-remotemodfiles" >
  </target>
  <target name="buildremotetiny" description="Simply bombs the modules to the package server" 
          depends="deploy-remotemodfiles" >
  </target>

  <!-- Perform lintian task on the code - HALT on Failure! -->
  <target name="lint" description="Performs a lintian check (syntax check) on all the code going into the archive(s)" depends="init, modsvnexport">
    <phplint haltonfailure="true">
      <fileset dir="${build.dir}/modules/" id="modules">
        <include name="**/*.php"/> 
      </fileset>
    </phplint>
  </target>
  
  <target name="modbuild-tgz" description="Generates .tgz file containing modules" depends="init, modsvnexport, lint">
    <tar destfile="${modtarfile}" compression="gzip">
      <fileset dir="${build.dir}/modules/"/>
    </tar>
  </target>
  
  <target name="modbuild-zip" description="Generates .zip file containing modules" depends="init, modsvnexport, lint">
    <zip destfile="${modzipfile}">
      <fileset dir="${build.dir}/modules/"/>
    </zip>
  </target>
  
  <!-- Deploy targets - local first, then remotes -->
  <!-- Local build target -->
  <target name="deploy-local" description="Copies archives to local folder" depends="init, buildcode">
    <copy file="${modtarfile}" todir="./final" overwrite="true"/>
    <copy file="${modzipfile}" todir="./final" overwrite="true"/>
    <!-- Clean up -->
    <delete dir="./build" includeemptydirs="true" verbose="true" failonerror="true" />
    <phingcall target="tweet">
            <property name="twitter.status" value="#Chisimba modules local deploy completed at ${build.time}" />
    </phingcall>
  </target>
  
  <target name="deploy-remote">
    <echo message="Copying fileset '${deploy.fileset.refid}' to ${ftp.host}${ftp.dir} in ${ftp.mode} mode" />
    <!-- phingcall target="tweet">
            <property name="twitter.status" value="Starting #Chisimba package update on packageserver " />
    </phingcall -->
    <ftpdeploy
        host="${ftp.host}"
        port="${ftp.port}"
        username="${ftp.username}"
        password="${ftp.password}"
        dir="${ftp.dir}"
        mode="${ftp.mode}">
        <fileset refid="${deploy.fileset.refid}" />
    </ftpdeploy>
  </target>
  
  <target name="deploy-remotemodfiles" depends="init">
    <echo msg="Deploying package files" />
    <!-- phingcall target="tweet">
      <property name="twitter.status" value="Deploying package files" />
    </phingcall -->
    <phingcall target="deploy-remote">
      <property name="deploy.fileset.refid" value="modarchive.files" />
    </phingcall>
  </target>
  
</project>
