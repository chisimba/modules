/*
 * 
 * Copyright (C) GNU/GPL AVOIR 2008
 * This program is free software; you can redistribute it and/or modify it under
 * the terms of the GNU General Public License as published by the Free Software
 * Foundation; either version 2 of the License, or (at your option) any later
 * version.
 * 
 * This program is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU General Public License for more
 * details.
 * 
 * You should have received a copy of the GNU General Public License along with
 * this program; if not, write to the Free Software Foundation, Inc., 51
 * Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
 */

/*
 * AnsweringFrame.java
 *
 * Created on 2008/12/11, 03:10:43
 */
package org.avoir.realtime.questions;

import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseEvent;
import java.io.Serializable;
import java.util.ArrayList;
import java.util.EventObject;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JComponent;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JScrollPane;
import javax.swing.JTable;
import javax.swing.JTextArea;
import javax.swing.JTree;
import javax.swing.SwingUtilities;
import javax.swing.event.CellEditorListener;
import javax.swing.event.ChangeEvent;
import javax.swing.event.EventListenerList;
import javax.swing.table.AbstractTableModel;
import javax.swing.table.TableCellEditor;
import javax.swing.table.TableCellRenderer;
import javax.swing.tree.TreeCellEditor;
import org.avoir.realtime.common.Constants;
import org.avoir.realtime.net.ConnectionManager;
import org.avoir.realtime.net.packets.RealtimePacket;
import org.avoir.realtime.net.packets.RealtimeQuestionPacket;
import org.jivesoftware.smack.packet.IQ.Type;

/**
 *
 * @author developer
 */
public class AnsweringFrame extends javax.swing.JFrame {

    private boolean expand = false;
    private RealtimeQuestionPacket questionPacket;
    private AnswersTableModel model;
    private JTable table = new JTable();
    private JTextArea answerField = new JTextArea();
    private ImageIcon questionImage;
    private Surface surface = new Surface();
    private boolean enableSubmitbutton;
    private ArrayList<Value> answers;

    /** Creates new form AnsweringFrame */
    public AnsweringFrame(RealtimeQuestionPacket questionPacket, boolean enableSubmitbutton) {
        initComponents();
        this.questionPacket = questionPacket;
        this.enableSubmitbutton = enableSubmitbutton;
        setTitle(questionPacket.getFilename());
        table.setFont(new Font("Dialog", 0, 16));

        table.setShowGrid(false);
        table.setDefaultRenderer(JComponent.class, new JComponentCellRenderer());
        table.setDefaultEditor(JComponent.class, new JComponentCellEditor());

        table.setOpaque(true);
        answerField.setFont(new Font("Dialog", 1, 18));
        model = new AnswersTableModel(questionPacket.getAnswerOptions());
        table.setModel(model);
        questionField.setText(questionPacket.getQuestion());

        if (questionPacket.getQuestionType() == Constants.ESSAY_QUESTION) {
            answersPanel.add(new JScrollPane(answerField), BorderLayout.CENTER);
        } else {
            JScrollPane sp = new JScrollPane(table);
            sp.getViewport().setBackground(Color.WHITE);
            answersPanel.add(sp, BorderLayout.CENTER);
        }

        splitPane.setRightComponent(new JScrollPane(surface));
        surface.repaint();
        submitButton.setEnabled(enableSubmitbutton);
        questionImage = questionPacket.getImage();
        surface.repaint();
    }

    public void setQuestionImage(ImageIcon questionImage) {
        this.questionImage = questionImage;
        surface.repaint();
    }

    class Surface extends JPanel {

        @Override
        public void paintComponent(Graphics g) {
            Graphics2D g2 = (Graphics2D) g;
            if (questionImage != null) {
                g2.drawImage(questionImage.getImage(), 0, 0, this);
                setPreferredSize(new Dimension(questionImage.getIconWidth(), questionImage.getIconHeight()));
                revalidate();
            }
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        splitPane = new javax.swing.JSplitPane();
        mainPanel = new javax.swing.JPanel();
        cPanel = new javax.swing.JPanel();
        submitButton = new javax.swing.JButton();
        topPanel = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        questionField = new javax.swing.JTextArea();
        answersPanel = new javax.swing.JPanel();
        atPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();

        mainPanel.setLayout(new java.awt.BorderLayout());

        submitButton.setText("Submit");
        submitButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitButtonActionPerformed(evt);
            }
        });
        cPanel.add(submitButton);

        mainPanel.add(cPanel, java.awt.BorderLayout.PAGE_END);

        topPanel.setLayout(new java.awt.BorderLayout());

        questionField.setBackground(new java.awt.Color(238, 227, 227));
        questionField.setColumns(20);
        questionField.setEditable(false);
        questionField.setFont(new java.awt.Font("Dialog", 1, 18));
        questionField.setForeground(new java.awt.Color(0, 0, 0));
        questionField.setRows(5);
        jScrollPane1.setViewportView(questionField);

        topPanel.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        mainPanel.add(topPanel, java.awt.BorderLayout.PAGE_START);

        answersPanel.setLayout(new java.awt.BorderLayout());

        atPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Tips, Hints, Remarks"));

        jLabel1.setFont(new java.awt.Font("Dialog", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 102, 102));
        jLabel1.setText("Enter Answer:");
        atPanel.add(jLabel1);

        answersPanel.add(atPanel, java.awt.BorderLayout.PAGE_START);

        mainPanel.add(answersPanel, java.awt.BorderLayout.CENTER);

        splitPane.setLeftComponent(mainPanel);

        getContentPane().add(splitPane, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void submitButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitButtonActionPerformed
        int n = JOptionPane.showConfirmDialog(this, "Confirm submit", "Confirm", JOptionPane.YES_NO_OPTION);
        boolean gotItCorrect = false;
        String ans = answerField.getText();
        if (n == JOptionPane.YES_OPTION) {
            if (questionPacket.getType() == Constants.TRUE_FALSE_QUESTION ||
                    questionPacket.getType() == Constants.MCQ_QUESTION) {

                for (int i = 0; i < answers.size(); i++) {
                    Value val = answers.get(i);
                    if (val.isSelectedByStudentAsAnswer() && val.isCorrectAnswer()) {
                        gotItCorrect = true;
                    }
                }
            }

            StringBuilder sb = new StringBuilder();
            sb.append("<qn-type>").append(questionPacket.getType()).append("</qn-type>");
            sb.append("<username>").append(questionPacket.getUsername()).append("</username>");
            sb.append("<passed>").append(gotItCorrect + "").append("</passed>");
            sb.append("<qn-name>").append(questionPacket.getFilename()).append("</qn-name>");
            sb.append("<instructor>").append(questionPacket.getInstructor()).append("</instructor>");
            sb.append("<essay-answer>").append(ans).append("</essay-answer>");
            RealtimePacket p = new RealtimePacket();
            p.setMode(RealtimePacket.Mode.POST_ANSWER);
            p.setType(Type.SET);
            p.setContent(sb.toString());
            ConnectionManager.sendPacket(p);
            dispose();

    }//GEN-LAST:event_submitButtonActionPerformed
    }
    // End of variables declaration

    class JComponentCellRenderer implements TableCellRenderer {

        public Component getTableCellRendererComponent(JTable table, Object value,
                boolean isSelected, boolean hasFocus, int row, int column) {
            return (JComponent) value;
        }
    }

    class JComponentCellEditor implements TableCellEditor, TreeCellEditor,
            Serializable {

        protected EventListenerList listenerList = new EventListenerList();
        transient protected ChangeEvent changeEvent = null;
        protected JComponent editorComponent = null;
        protected JComponent container = null;		// Can be tree or table

        public Component getComponent() {
            return editorComponent;
        }

        public Object getCellEditorValue() {
            return editorComponent;
        }

        public boolean isCellEditable(EventObject anEvent) {
            return true;
        }

        public boolean shouldSelectCell(EventObject anEvent) {
            if (editorComponent != null && anEvent instanceof MouseEvent && ((MouseEvent) anEvent).getID() == MouseEvent.MOUSE_PRESSED) {
                Component dispatchComponent = SwingUtilities.getDeepestComponentAt(editorComponent, 3, 3);
                MouseEvent e = (MouseEvent) anEvent;
                MouseEvent e2 = new MouseEvent(dispatchComponent, MouseEvent.MOUSE_RELEASED,
                        e.getWhen() + 100000, e.getModifiers(), 3, 3, e.getClickCount(),
                        e.isPopupTrigger());
                dispatchComponent.dispatchEvent(e2);
                e2 = new MouseEvent(dispatchComponent, MouseEvent.MOUSE_CLICKED,
                        e.getWhen() + 100001, e.getModifiers(), 3, 3, 1,
                        e.isPopupTrigger());
                dispatchComponent.dispatchEvent(e2);
            }
            return false;
        }

        public boolean stopCellEditing() {
            fireEditingStopped();
            return true;
        }

        public void cancelCellEditing() {
            fireEditingCanceled();
        }

        public void addCellEditorListener(CellEditorListener l) {
            listenerList.add(CellEditorListener.class, l);
        }

        public void removeCellEditorListener(CellEditorListener l) {
            listenerList.remove(CellEditorListener.class, l);
        }

        protected void fireEditingStopped() {
            Object[] listeners = listenerList.getListenerList();
            // Process the listeners last to first, notifying
            // those that are interested in this event
            for (int i = listeners.length - 2; i >= 0; i -= 2) {
                if (listeners[i] == CellEditorListener.class) {
                    // Lazily create the event:
                    if (changeEvent == null) {
                        changeEvent = new ChangeEvent(this);
                    }
                    ((CellEditorListener) listeners[i + 1]).editingStopped(changeEvent);
                }
            }
        }

        protected void fireEditingCanceled() {
            // Guaranteed to return a non-null array
            Object[] listeners = listenerList.getListenerList();
            // Process the listeners last to first, notifying
            // those that are interested in this event
            for (int i = listeners.length - 2; i >= 0; i -= 2) {
                if (listeners[i] == CellEditorListener.class) {
                    // Lazily create the event:
                    if (changeEvent == null) {
                        changeEvent = new ChangeEvent(this);
                    }
                    ((CellEditorListener) listeners[i + 1]).editingCanceled(changeEvent);
                }
            }
        }

        // implements javax.swing.tree.TreeCellEditor
        public Component getTreeCellEditorComponent(JTree tree, Object value,
                boolean isSelected, boolean expanded, boolean leaf, int row) {
            String stringValue = tree.convertValueToText(value, isSelected,
                    expanded, leaf, row, false);

            editorComponent = (JComponent) value;
            container = tree;
            return editorComponent;
        }

        // implements javax.swing.table.TableCellEditor
        public Component getTableCellEditorComponent(JTable table, Object value,
                boolean isSelected, int row, int column) {

            editorComponent = (JComponent) value;
            container = table;
            return editorComponent;
        }
    } // End of class JComponentCellEditor

    class AnswersTableModel extends AbstractTableModel {

        private String[] columnNames = {
            "Option", //0
            "Value",
            "Select Correct Answer"
        };
        int i = 0;

        public AnswersTableModel(ArrayList<Value> xanswers) {
            try {
                answers = xanswers;
                data = new Object[answers.size()][columnNames.length];

                ButtonGroup bg = new ButtonGroup();

                for (i = 0; i < answers.size(); i++) {
                    final JRadioButton ansRB = new JRadioButton();
                    final int selectedOption = i;
                    ansRB.addActionListener(new ActionListener() {

                        public void actionPerformed(ActionEvent arg0) {
                            int oldWidth = getWidth();
                            int oldHeight = getHeight();
                            if (expand) {
                                setSize(oldWidth + 1, oldHeight + 1);
                                expand = false;
                            } else {
                                setSize(oldWidth - 1, oldHeight - 1);
                                expand = true;
                            }
                            for (int k = 0; k < answers.size(); k++) {
                                answers.get(k).setSelectedByStudentAsAnswer(false);
                            }
                            answers.get(selectedOption).setSelectedByStudentAsAnswer(true);
                            questionPacket.setAnswerOptions(answers);
                        }
                    });
                    ansRB.setBackground(Color.WHITE);
                    ansRB.setSelected(answers.get(i).isSelectedByStudentAsAnswer());
                    bg.add(ansRB);

                    Object[] row = {answers.get(i).getOption(), answers.get(i).getValue(),
                        ansRB
                    };
                    data[i] = row;

                }
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
        private Object[][] data = new Object[0][columnNames.length];

        private void updateCorrectAnswer(int k) {
            for (int i = 0; i < answers.size(); i++) {
                if (i == k) {
                    answers.get(i).setSelectedByStudentAsAnswer(true);
                } else {
                    answers.get(i).setSelectedByStudentAsAnswer(false);
                }
            }
        }

        public int getColumnCount() {
            return columnNames.length;
        }

        public int getRowCount() {
            return data.length;
        }

        public String getColumnName(int col) {
            return columnNames[col];
        }

        public Object getValueAt(int row, int col) {
            return data[row][col];

        }

        @Override
        public boolean isCellEditable(int row, int col) {
            return col == 2 ? true : false;
        }

        @Override
        public void setValueAt(Object value, int row, int col) {
            /*if (col == 2) {
            JRadioButton rb = (JRadioButton) value;
            selectedQuestionOptions.get(row).setAnswer(rb.isSelected());
            QuestionPacket qn=questions.get(selectedRow);
            qn.setAnswerOptions(selectedQuestionOptions);
            questions.set(selectedRow, qn);
            }*/
            data[row][col] = value;
            fireTableCellUpdated(row, col);
        }


        /*
         * JTable uses this method to determine the default renderer/
         * editor for each cell.  If we didn't implement this method,
         * then the last column would contain text ("true"/"false"),
         * rather than a check box.
         */
        public Class getColumnClass(int c) {
            return getValueAt(0, c).getClass();
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel answersPanel;
    private javax.swing.JPanel atPanel;
    private javax.swing.JPanel cPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel mainPanel;
    private javax.swing.JTextArea questionField;
    private javax.swing.JSplitPane splitPane;
    private javax.swing.JButton submitButton;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
}
