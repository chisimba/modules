/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * UserSearch.java
 *
 * Created on 21 Jun 2009, 7:29:36 PM
 */
package org.avoir.realtime.gui.search;

import java.awt.BorderLayout;
import java.awt.Dimension;
import java.awt.Toolkit;
import java.util.ArrayList;
import java.util.Collection;
import java.util.Iterator;
import javax.swing.JOptionPane;
import org.avoir.realtime.gui.room.InviteParticipants;
import org.avoir.realtime.gui.room.RoomMemberListFrame;

import org.avoir.realtime.net.ConnectionManager;
import org.jivesoftware.smackx.Form;
import org.jivesoftware.smackx.ReportedData;
import org.jivesoftware.smackx.ReportedData.Column;
import org.jivesoftware.smackx.ReportedData.Row;
import org.jivesoftware.smackx.search.UserSearchManager;

/**
 *
 * @author david
 */
public class UserSearch extends javax.swing.JFrame {

  
    private UserSearchManager search;
    // private Form answerForm;
    private Dimension ss = Toolkit.getDefaultToolkit().getScreenSize();
    private InviteParticipants inviteParticipants;
    private DataFormUI questionForm;
    private RoomMemberListFrame roomMemberListFrame;

    /** Creates new form UserSearch */
    public UserSearch(InviteParticipants inviteParticipants) {
        this.inviteParticipants = inviteParticipants;
        initComponents();
        setSize(400, 300);
        try {
            search = new UserSearchManager(ConnectionManager.getConnection());
            Form searchForm = search.getSearchForm("search." + ConnectionManager.getConnection().getServiceName());
            questionForm = new DataFormUI(searchForm);
            add(questionForm, BorderLayout.CENTER);
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Unable to initialize search service");
        }
    }

    public UserSearch(RoomMemberListFrame roomMemberListFrame) {
        this.roomMemberListFrame = roomMemberListFrame;
        initComponents();
        setSize(400, 300);
        try {
            search = new UserSearchManager(ConnectionManager.getConnection());
            Collection services = search.getSearchServices();
                   Form searchForm = search.getSearchForm("search."+ConnectionManager.getConnection().getServiceName());
                    questionForm = new DataFormUI(searchForm);
                    add(questionForm, BorderLayout.CENTER);
             
        } catch (Exception ex) {
            ex.printStackTrace();
            JOptionPane.showMessageDialog(null, "Unable to initialize search service");
        }
    }

    private void doSearch() {

        try {
            Form answerForm = questionForm.getFilledForm();

            ReportedData data = search.getSearchResults(answerForm, "search." + ConnectionManager.getConnection().getServiceName());
            Iterator<Column> cols = data.getColumns();
            ArrayList<Row> tableRows = new ArrayList<Row>();
            ArrayList<String> colHeaders = new ArrayList<String>();
            while (cols.hasNext()) {
                Column col = cols.next();
                colHeaders.add(col.getLabel());
            }
            Iterator<Row> rows = data.getRows();

            while (rows.hasNext()) {
                Row row = rows.next();
                tableRows.add(row);
            }
            if (inviteParticipants != null) {

                UserSearchResults rs = new UserSearchResults(inviteParticipants, tableRows, colHeaders);
                rs.setLocationRelativeTo(null);
                rs.setVisible(true);
                dispose();
            } else {

                UserSearchResults rs = new UserSearchResults(roomMemberListFrame, tableRows, colHeaders);
                rs.setLocationRelativeTo(null);
                rs.setVisible(true);
                dispose();
            }
        } catch (Exception ex) {
            ex.printStackTrace();

        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        topPanel = new javax.swing.JPanel();
        cPanel = new javax.swing.JPanel();
        searchButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        getContentPane().add(topPanel, java.awt.BorderLayout.PAGE_START);

        searchButton.setText("Search");
        searchButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchButtonActionPerformed(evt);
            }
        });
        cPanel.add(searchButton);

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });
        cPanel.add(cancelButton);

        getContentPane().add(cPanel, java.awt.BorderLayout.PAGE_END);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchButtonActionPerformed
        doSearch();
    }//GEN-LAST:event_searchButtonActionPerformed

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel cPanel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JButton searchButton;
    private javax.swing.JPanel topPanel;
    // End of variables declaration//GEN-END:variables
}
