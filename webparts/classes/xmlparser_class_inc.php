<?php
// security check - must be included in all scripts
if (!$GLOBALS['kewl_entry_point_run']) {
    die("You cannot view this page directly");
}
// end security check

/**
 * Utility class for xml parsing and misc xml functions
 *
 * @category  Chisimba
 * @package   webparts
 * @author    Charl Mert <charl.mert@gmail.com>
 *
 */

class xmlparser extends object
{

    /**
    * wpTableName - The currently captured table name for use when porting data structure from an existing application
    *
    * @access private
    * @var string
    */
    protected $wpTableName;

    /**
    * wpTableFields - The currently captured table field structures for use when porting data structure from an existing application
    *
    * @access private
    * @var array
    */
    protected $wpTableFields;

    /**
    * wpTableOptions - The currently captured table options for use when porting data structure from an existing application
    *
    * @access private
    * @var array
    */
    protected $wpTableOptions;

	/**
    * templateSecurityCode - The code that prevents pages from being accessed directly
    *
    * @access private
    * @var string
    */
    protected $templateSecurityCode;


	/**
    * templateSqlCode - The currently converted MDB2 struct code, will buffer up to 1 table per iteration
    *
    * @access private
    * @var string
    */
    protected $templateSqlCode;

	/**
    * templateSqlIndexCode - The currently converted MDB2 struct code, will buffer up to 1 table per iteration
    *
    * @access private
    * @var string
    */
    protected $templateSqlIndexCode;

	/**
    * wpTableKeys - The currently converted MDB2 struct code, will buffer up to 1 table per iteration
    *
    * @access private
    * @var string
    */
    protected $wpTableKeys;




    /**
    * Class Constructor
    *
    * @access public
    * @return void
    */

    public function init()
    {
        // Load Config Object
        $this->objConfig = $this->getObject('altconfig', 'config');
		
		$this->wpModuleName = '';	
        $this->wpTableName = '';
        $this->wpTableFields = array();
        $this->wpTableOptions = array();
        $this->wpTableKeys = array();
        $this->wpBasePath = ''; //will be set in the import class

		$this->templateSecurityCode = '<?PHP

/*
 * This file was generated by the Web Parts Module Builder
 */

// Security Check - must be included in all scripts
if (!$GLOBALS[\'kewl_entry_point_run\']) {
    die("You cannot view this page directly");
}
		';

    }


    /**
     * This method sets the Wep Parts Base Path
     */
    public function setWpBasePath($value) {
 
		$this->wpBasePath = $value;

	}


    /**
     * This method sets the Wep Parts Module Name
     * 
     */
    public function setWpModuleName($value) {
 
		$this->wpModuleName = $value;
	}


    /**
     * This method generate and MDB2 compatible php script for use with data access in Chisimba modules
     * 
     * To get a valid mysql xml dump use the following mysql command:
	 * mysqldump -X -u[username] -p[password] [databasename] > mysql_xml_export.sql
     * 
     * This will generate the xml file who's string or path is to be used as the $mysqlXmlDump parameter. 
     * 
     * @param string $mysqlXmlDump - The xml formatted mysqldump or full path to valid mysql xml export file
     * @return boolean TRUE or FALSE based on XML errors encountered
     * @author: Charl Mert <charl.mert@gmail.com>
     */
    function mysqlToMdb2($mysqlXmlDump) {
        //$elems = simplexml_load_string($mysqlXmlDump);
	
		if (fopen($mysqlXmlDump, 'r')) {
			$mysqlXmlDump = file_get_contents($mysqlXmlDump);
		}

		//SimplXMLParser doesn't like the xml declaration so have to strip it
		$mysqlXmlDump = str_replace('<?xml version="1.0"?>', '', $mysqlXmlDump);

        $xml = new SimpleXMLElement($mysqlXmlDump);

        //Grabbing all of the elements under "mysqlXmlDump"
        $elems = $xml->xpath('/mysqldump/database/*');

        foreach ($elems as $elem){
            //tag name:
            $tagName = $elem->getName();

            //tag contents:
            if (isset($elem[0])) {
                $tagData = $elem[0];
            }


			//echo $tagName."\n";

			//Catching Table Name stored in the name attribute of the <table_strcuture> tag
            if (strtolower($tagName) == 'table_structure') {
                //tag attributes:
                $attrs = $elem->attributes();
                if (!empty($attrs)){
                    foreach ($attrs as $attr => $value) {
						$attr = strtolower($attr);
						if ($attr == 'name') {
							$this->wpTableName = $value;
						}
                    }
                }

				//Grabbing the inner fields an options
				foreach ($elem as $e) {
		            //tag name:
		            $tagName = $e->getName();

		            //tag contents:
		            if (isset($e[0])) {
		                $tagData = $e[0];
		            }


					//Catching Table Options <options> tag
		            if (strtolower($tagName) == 'options') {
		                //tag attributes:
		                $attrs = $e->attributes();
		                if (!empty($attrs)){
		                    foreach ($attrs as $attr => $value) {
								$attr = strtolower($attr);
		
								if ($attr == 'comment') {
									$this->wpTableOptions['comment'] = $value;
								} else if ($attr == 'collation') {
									$this->wpTableOptions['collate'] = $value;
								} else if ($attr == 'character_set') {
									$this->wpTableOptions['character_set'] = $value;
								}
		
		                    }
		                }
		            }

					//Catching Table Fields stored in all the attributes of the <field> tag
		            if (strtolower($tagName) == 'field') {
		                //tag attributes:
		                $attrs = $e->attributes();
		                if (!empty($attrs)){
		                    foreach ($attrs as $attr => $value) {
								$attr = strtolower($attr);
		
								if ($attr == 'field') {
									$tableFields['field'] = $value;
								} 
		
								else if ($attr == 'type') {
									$tableFields['type'] = $value;
								} 
							
								else if ($attr == 'null') {
									$tableFields['null'] = $value;
								}
		
								else if ($attr == 'key') {
									$tableFields['key'] = $value;
					
									if (strtolower($value) == 'pri') {
										array_push($this->wpTableKeys, $value);
	                					$this->templateSqlIndexCode .= '                \''.$tableFields['field'].'\' => array(),'."\n";
									}
								}
		
								else if ($attr == 'default') {
									$tableFields['default'] = $value;
								}
		
								else if ($attr == 'extra') {
									$tableFields['extra'] = $value;
								}
							}
						}

						array_push($this->wpTableFields,$tableFields);

		    		}
		

				}

					$this->templateSqlCode = $this->templateSecurityCode;

					$tableName  = 'tbl_'. $this->wpModuleName . '_' .strtolower($this->wpTableName);
					$this->templateSqlCode .= "\n".'$tablename = \''.$tableName.'\';'."\n\n";

					if (!empty($this->wpTableOptions)) {
						$this->templateSqlCode .= '$options = array(';

						foreach ($this->wpTableOptions as $name => $value) {
							$this->templateSqlCode .= "'$name' => '$value',";
						}
	
						$this->templateSqlCode = substr($this->templateSqlCode,0, strlen($this->templateSqlCode) - 1);

						$this->templateSqlCode .= ");\n\n";
					}

					$this->templateSqlCode .= '$fields = array('."\n\n";

					//Adding id field for all tables here.
					$this->templateSqlCode .= "
    'id' => array(
        'type' => 'text',
        'length' => 32
        ),\n";

					foreach ($this->wpTableFields as $tableField) {
						if (isset($tableField['field'])) {
                        	$this->templateSqlCode .= "    '$tableField[field]' => array(\n";

							//MDB2 Type
							if (isset($tableField['type'])) {
					
								$foundMatch = FALSE;

								//Dissecting the type:
								$mdbType = $tableField['type'];
			
								//Detecting varchar(*)
								if (preg_match('/.*varchar.*/i',$mdbType)) {
								
									$regex = '/varchar\(([0-9]+)\)/i';
				                    preg_match($regex, $mdbType, $matches);

									$this->templateSqlCode .= "        'type' => 'text',\n";
									$this->templateSqlCode .= "        'length' => '$matches[1]',\n";

									$foundMatch = TRUE;
								}


								//Detecting char
								if (preg_match('/^char.*/i',trim($mdbType))) {
								
									$this->templateSqlCode .= "        'type' => 'text',\n";
									$this->templateSqlCode .= "        'length' => '1',\n";
								
									$foundMatch = TRUE;
								}

								//Detecting integer
								if (preg_match('/.*int.*/i',$mdbType) ||
									preg_match('/.*smallint.*/i',$mdbType) ||
									preg_match('/.*numeric.*/i',$mdbType)) {
								
									$regex = '/varchar\(([0-9]+)\)/i';
				                    preg_match($regex, $mdbType, $matches);

									$this->templateSqlCode .= "        'type' => 'integer',\n";
									$this->templateSqlCode .= "        'length' => '$matches[1]',\n";
								
									$foundMatch = TRUE;
								}

								//Detecting decimal
								if (preg_match('/.*decimal.*/i',$mdbType)) {
								
									//$regex = '/varchar\(([0-9]+)\)/i';
				                    //preg_match($regex, $mdbType, $matches);

									$this->templateSqlCode .= "        'type' => 'decimal',\n";
									//$this->templateSqlCode .= "        'length' => '$matches[1]',\n"; //Not needed in MDB2?? weird
								
									$foundMatch = TRUE;
								}

								//Detecting float
								if (preg_match('/.*decimal.*/i',$mdbType)) {
								
									//$regex = '/varchar\(([0-9]+)\)/i';
				                    //preg_match($regex, $mdbType, $matches);

									$this->templateSqlCode .= "        'type' => 'decimal',\n";
									//$this->templateSqlCode .= "        'length' => '$matches[1]',\n"; //Not needed in MDB2?? weird
								
									$foundMatch = TRUE;
								}


								//Detecting Date
								if (preg_match('/.*date.*/i',$mdbType)) {

									$this->templateSqlCode .= "        'type' => 'date',\n";
								
									$foundMatch = TRUE;
								}

								//Detecting Timestamp
								if (preg_match('/.*timestamp.*/i',$mdbType)) {

									$this->templateSqlCode .= "        'type' => 'timestamp',\n";
								
									$foundMatch = TRUE;
								}

								//Detecting Blob
								if (preg_match('/.*blob.*/i',$mdbType)) {

									$this->templateSqlCode .= "        'type' => 'blob',\n";
								
									$foundMatch = TRUE;
								}


								//Default Type if non could be found is text(255)
								if (!$foundMatch) {
									$this->templateSqlCode .= "        'type' => 'text',\n";
									$this->templateSqlCode .= "        'length' => '255',\n";
								}

							}



							//MDB2 Null
                            if (isset($tableField['null'])) {

                                $mdbNull = strtolower($tableField['null']);

								$notnull = ($mdbNull != 'yes')? 'FALSE' : 'TRUE';

                                $this->templateSqlCode .= "        'notnull' => '$notnull',\n";
                            }

							//MDB2 Default
                            if (isset($tableField['default'])) {

                                $mdbDefault = strtolower($tableField['default']);

                                $this->templateSqlCode .= "        'default' => '$mdbDefault',\n";
                            }

							$this->templateSqlCode .= "    ),\n";
	
                    	}


				}

					$this->templateSqlCode = substr($this->templateSqlCode,0, strlen($this->templateSqlCode) - 2);
					$this->templateSqlCode .= "\n);\n\n\n";

					$this->templateSqlCode .= '//Generating Indexes'."\n\n";
					$this->templateSqlCode .= '$name = \'idx_'.md5(rand(0,1000).date('%y%m%d-hms')).'\';'."\n";
					$this->templateSqlCode .= '//Generating Indexes'."\n\n";
					$this->templateSqlCode .= '$indexes = array('."\n";

					if (!empty($this->wpTableKeys)) {
						$this->templateSqlCode .= '             \'fields\' => array('."\n";
						$this->templateSqlCode .= $this->templateSqlIndexCode;
						$this->templateSqlCode = substr($this->templateSqlCode, 0, strlen($this->templateSqlCode) - 2);
						$this->templateSqlCode .= "\n".'             )';
					}

					$this->templateSqlCode .= "\n);";


					//Template code for one table has been collected
					//Writing Sql File

					$fileName = 'tbl_'. $this->wpModuleName . '_' .strtolower($this->wpTableName.'.sql');

					$objImport = $this->getObject('import', 'webparts');
					$objImport->saveSqlTemplate($fileName, $this->wpModuleName, $this->templateSqlCode);
					$this->wpBasePath = $objImport->wpBasePath;				
	
					$msg = "Wep Parts: Wrote SQL Template File $this->wpBasePath" . $fileName."\n";
					echo $msg;
					log_debug($msg);
			
					//Flushing
					$this->templateSqlIndexCode = '';
					$this->templateSqlCode = '';
				    $this->wpTableFields = array();
			       	$this->wpTableOptions = array();
			

            }
 		
    	}


		return TRUE;

	}

}

?>
