<?php
require_once 'PHPUnit/Framework.php';
require_once(dirname(__FILE__).'/../../config.php');


/**
 * Test class for PandraColumn.
 * Generated by PHPUnit on 2010-01-09 at 11:52:23.
 */
class PandraSuperColumnTest extends PHPUnit_Framework_TestCase {

    // The supercolumn object we're testing
    public $obj = NULL;

    // parent column family
    public $superColumnFamily = NULL;

    // key id
    public $keyID = 'PandraCFTest_Super';

    // supercolumn name
    public $superName = 'address1';

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     *
     * To test multiple nodes, add their connection strings here
     *
     * @access protected
     */
    protected function setUp() {
        PandraCore::addLogger('STDOUT');

        $this->superColumnFamily = new PandraSuperColumnFamily();
        $this->superColumnFamily->setKeySpace('Keyspace1');
        $this->superColumnFamily->setName('Super1');

        $this->superColumnFamily->setKeyID($this->keyID);

        $this->obj = new PandraSuperColumn($this->superName);
        $this->obj->setParent($this->superColumnFamily);
        $this->obj->addColumn('city', 'string');
        $this->obj->addColumn('street', 'string');
        $this->obj->addColumn('zip', 'int');

        PandraCore::connectSeededKeyspace(array('localhost'));
    }

    /**
     * Tears down the fixture, for example, closes a network connection.
     * This method is called after a test is executed.
     *
     * @access protected
     */
    protected function tearDown() {
        PandraCore::disconnectAll();
    }

    public function testSetGetParent() {
        $newCF = new PandraSuperColumnFamily();
        $newCF->setKeySpace('Keyspace1');
        $newCF->setName('Super1');
        $this->obj->setParent($newCF);

        $this->assertEquals($newCF, $this->obj->getParent());
    }

    public function testSaveLoadDelete() {
        // this could also be $this->obj->column_city = 'SOME CITY';
        $this->obj->getColumn('city')->setValue('SOME CITY');
        $this->obj->getColumn('street')->setValue('MY STREET');
        $this->obj->getColumn('zip')->setValue('123654');

        $this->assertTrue($this->obj->save(), $this->obj->lastError());

        // Test Load
        unset($this->obj);
        $this->setUp();
        $this->assertTrue($this->obj->load($this->keyID), $this->obj->lastError());

        // Delete supercolumn
        $this->obj->delete();
        $this->assertTrue($this->obj->getDelete());
        $this->assertTrue($this->obj->save(), $this->obj->lastError());

        // Confirm we can't load the key any more
        unset($this->obj);
        $this->setUp();
        $this->assertFalse($this->obj->load($this->keyID), $this->obj->lastError());
    }

    public function testNotations() {

        $colName = 'column1';

        // Array Access
        $newValue = 'ASDKFWIOER23';
        $this->obj[$colName] = $newValue;
        $this->assertTrue($this->obj[$colName] == $newValue);
        $this->assertFalse($this->obj[$colName] != $newValue);

        // Magic Method
        $newValue = 'OIWERUWINCN@$';
        $this->obj->column_column1 = $newValue;
        $this->assertTrue($this->obj->column_column1 == $newValue);
        $this->assertFalse($this->obj->column_column1 != $newValue);

        // Accessors/Mutators
        $newValue = 'ASDWOIU@NCN';
        $this->obj->getColumn($colName)->setValue($newValue);
        $this->assertTrue($this->obj->getColumn($colName)->value == $newValue);
        $this->assertFalse($this->obj->getColumn($colName)->value != $newValue);

        // test unset
        unset($this->obj['column1']);
        $this->assertFalse($this->obj->getColumn('column1') instanceof PandraColumn);
    }

    public function testRegisterError() {
        $errorMsg = 'An error has occurred';
        $this->obj->registerError($errorMsg);

        $this->assertTrue($errorMsg == $this->obj->lastError());

    }

}
?>