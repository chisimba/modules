<?php
/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';


$GLOBALS['cassandra_E_ConsistencyLevel'] = array(
  'ZERO' => 0,
  'ONE' => 1,
  'QUORUM' => 2,
  'DCQUORUM' => 3,
  'DCQUORUMSYNC' => 4,
  'ALL' => 5,
  'ANY' => 6,
);

final class cassandra_ConsistencyLevel {
  const ZERO = 0;
  const ONE = 1;
  const QUORUM = 2;
  const DCQUORUM = 3;
  const DCQUORUMSYNC = 4;
  const ALL = 5;
  const ANY = 6;
  static public $__names = array(
    0 => 'ZERO',
    1 => 'ONE',
    2 => 'QUORUM',
    3 => 'DCQUORUM',
    4 => 'DCQUORUMSYNC',
    5 => 'ALL',
    6 => 'ANY',
  );
}

class cassandra_Column extends TBase {
  static $_TSPEC;

  public $name = null;
  public $value = null;
  public $timestamp = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'value',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Column';
  }

  public function read($input)
  {
    return $this->_read('Column', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Column', self::$_TSPEC, $output);
  }
}

class cassandra_SuperColumn extends TBase {
  static $_TSPEC;

  public $name = null;
  public $columns = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'name',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'cassandra_Column',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SuperColumn';
  }

  public function read($input)
  {
    return $this->_read('SuperColumn', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('SuperColumn', self::$_TSPEC, $output);
  }
}

class cassandra_ColumnOrSuperColumn extends TBase {
  static $_TSPEC;

  public $column = null;
  public $super_column = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'column',
          'type' => TType::STRUCT,
          'class' => 'cassandra_Column',
          ),
        2 => array(
          'var' => 'super_column',
          'type' => TType::STRUCT,
          'class' => 'cassandra_SuperColumn',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ColumnOrSuperColumn';
  }

  public function read($input)
  {
    return $this->_read('ColumnOrSuperColumn', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ColumnOrSuperColumn', self::$_TSPEC, $output);
  }
}

class cassandra_NotFoundException extends TException {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'NotFoundException';
  }

  public function read($input)
  {
    return $this->_read('NotFoundException', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('NotFoundException', self::$_TSPEC, $output);
  }
}

class cassandra_InvalidRequestException extends TException {
  static $_TSPEC;

  public $why = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'why',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'InvalidRequestException';
  }

  public function read($input)
  {
    return $this->_read('InvalidRequestException', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('InvalidRequestException', self::$_TSPEC, $output);
  }
}

class cassandra_UnavailableException extends TException {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'UnavailableException';
  }

  public function read($input)
  {
    return $this->_read('UnavailableException', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('UnavailableException', self::$_TSPEC, $output);
  }
}

class cassandra_TimedOutException extends TException {
  static $_TSPEC;


  public function __construct() {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        );
    }
  }

  public function getName() {
    return 'TimedOutException';
  }

  public function read($input)
  {
    return $this->_read('TimedOutException', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TimedOutException', self::$_TSPEC, $output);
  }
}

class cassandra_AuthenticationException extends TException {
  static $_TSPEC;

  public $why = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'why',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'AuthenticationException';
  }

  public function read($input)
  {
    return $this->_read('AuthenticationException', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('AuthenticationException', self::$_TSPEC, $output);
  }
}

class cassandra_AuthorizationException extends TException {
  static $_TSPEC;

  public $why = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'why',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'AuthorizationException';
  }

  public function read($input)
  {
    return $this->_read('AuthorizationException', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('AuthorizationException', self::$_TSPEC, $output);
  }
}

class cassandra_ColumnParent extends TBase {
  static $_TSPEC;

  public $column_family = null;
  public $super_column = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        3 => array(
          'var' => 'column_family',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'super_column',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ColumnParent';
  }

  public function read($input)
  {
    return $this->_read('ColumnParent', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ColumnParent', self::$_TSPEC, $output);
  }
}

class cassandra_ColumnPath extends TBase {
  static $_TSPEC;

  public $column_family = null;
  public $super_column = null;
  public $column = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        3 => array(
          'var' => 'column_family',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'super_column',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'column',
          'type' => TType::STRING,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'ColumnPath';
  }

  public function read($input)
  {
    return $this->_read('ColumnPath', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('ColumnPath', self::$_TSPEC, $output);
  }
}

class cassandra_SliceRange extends TBase {
  static $_TSPEC;

  public $start = null;
  public $finish = null;
  public $reversed = false;
  public $count = 100;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'start',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'finish',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'reversed',
          'type' => TType::BOOL,
          ),
        4 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SliceRange';
  }

  public function read($input)
  {
    return $this->_read('SliceRange', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('SliceRange', self::$_TSPEC, $output);
  }
}

class cassandra_SlicePredicate extends TBase {
  static $_TSPEC;

  public $column_names = null;
  public $slice_range = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'column_names',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        2 => array(
          'var' => 'slice_range',
          'type' => TType::STRUCT,
          'class' => 'cassandra_SliceRange',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'SlicePredicate';
  }

  public function read($input)
  {
    return $this->_read('SlicePredicate', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('SlicePredicate', self::$_TSPEC, $output);
  }
}

class cassandra_KeyRange extends TBase {
  static $_TSPEC;

  public $start_key = null;
  public $end_key = null;
  public $start_token = null;
  public $end_token = null;
  public $count = 100;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'start_key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'end_key',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'start_token',
          'type' => TType::STRING,
          ),
        4 => array(
          'var' => 'end_token',
          'type' => TType::STRING,
          ),
        5 => array(
          'var' => 'count',
          'type' => TType::I32,
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'KeyRange';
  }

  public function read($input)
  {
    return $this->_read('KeyRange', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('KeyRange', self::$_TSPEC, $output);
  }
}

class cassandra_KeySlice extends TBase {
  static $_TSPEC;

  public $key = null;
  public $columns = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'key',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'columns',
          'type' => TType::LST,
          'etype' => TType::STRUCT,
          'elem' => array(
            'type' => TType::STRUCT,
            'class' => 'cassandra_ColumnOrSuperColumn',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'KeySlice';
  }

  public function read($input)
  {
    return $this->_read('KeySlice', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('KeySlice', self::$_TSPEC, $output);
  }
}

class cassandra_Deletion extends TBase {
  static $_TSPEC;

  public $timestamp = null;
  public $super_column = null;
  public $predicate = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'timestamp',
          'type' => TType::I64,
          ),
        2 => array(
          'var' => 'super_column',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'predicate',
          'type' => TType::STRUCT,
          'class' => 'cassandra_SlicePredicate',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Deletion';
  }

  public function read($input)
  {
    return $this->_read('Deletion', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Deletion', self::$_TSPEC, $output);
  }
}

class cassandra_Mutation extends TBase {
  static $_TSPEC;

  public $column_or_supercolumn = null;
  public $deletion = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'column_or_supercolumn',
          'type' => TType::STRUCT,
          'class' => 'cassandra_ColumnOrSuperColumn',
          ),
        2 => array(
          'var' => 'deletion',
          'type' => TType::STRUCT,
          'class' => 'cassandra_Deletion',
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'Mutation';
  }

  public function read($input)
  {
    return $this->_read('Mutation', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('Mutation', self::$_TSPEC, $output);
  }
}

class cassandra_TokenRange extends TBase {
  static $_TSPEC;

  public $start_token = null;
  public $end_token = null;
  public $endpoints = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'start_token',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'end_token',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'endpoints',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'TokenRange';
  }

  public function read($input)
  {
    return $this->_read('TokenRange', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('TokenRange', self::$_TSPEC, $output);
  }
}

class cassandra_AuthenticationRequest extends TBase {
  static $_TSPEC;

  public $credentials = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'credentials',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRING,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRING,
            ),
          ),
        );
    }
    if (is_array($vals)) {
      parent::__construct(self::$_TSPEC, $vals);
    }
  }

  public function getName() {
    return 'AuthenticationRequest';
  }

  public function read($input)
  {
    return $this->_read('AuthenticationRequest', self::$_TSPEC, $input);
  }
  public function write($output) {
    return $this->_write('AuthenticationRequest', self::$_TSPEC, $output);
  }
}

?>
