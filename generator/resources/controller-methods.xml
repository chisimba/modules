<?xml version="1.0" encoding="utf-8"?>
<!-- This file is a code generation template for Chisimba controller methods -->
<chisimba_controller_methods>

<method>
  <name>
  	init
  </name>
  <code>
    /**
    *
    * Constructor for the module controller
    *
    */
    public function init()
    {
{OBJECTS}{LOGGER}
    }
  </code>
</method>

<method>
  <name>
    dispatch
  </name>
  <code>
    /**
     * 
     * The standard dispatch method for a Chisimba module. The dispatch() 
     * method uses methods determined from the action parameter of the 
     * querystring and executes the appropriate method, returning its 
     * body template. This body template which renders the module
     * output.
     * 
     * @access public
     * 
     */
    public function dispatch()
    {
        //Get action from query string and set default to view
        $action=$this->getParam('action', 'view');
        /*
        * Convert the action into a method (alternative to 
        * using case selections)
        */
        $method = $this->__getMethod($action);
        /*
        * Return the template determined by the method resulting 
        * from action
        */
        return $this->$method();
    }
  </code>
</method>

<method>
  <name>
    view
  </name>
  <code>
    /**
    * 
    * Method corresponding to the view action. It fetches the data
    * into an array and passes it to a main_tpl content template.
    *
    * @access private
    * 
    */
    private function __view()
    {
        $filter = NULL;
        $ar = $this->{DATACLASS}->fetchStories($filter);
        $this->setVarByRef('ar', $ar);
        return "main_tpl.php";
    }
  </code>
</method>


<method>
  <name>
    edit
  </name>
  <code>
    /**
    * 
    * Method corresponding to the edit action. It sets the mode to 
    * edit and returns the edit template.
    *
    * @access private
    * 
    */
    private function __edit()
    {
        $this->setvar('mode', "edit");
        return 'editform_tpl.php';
    }
  </code>
</method>

<method>
  <name>
    add
  </name>
  <code>
    /**
    * 
    * Method corresponding to the add action. It sets the mode to 
    * add and returns the edit content template.
    * @access private
    * 
    */
    private function __add()
    {
        $this->setvar('mode', 'add');
        return 'editform_tpl.php';
    }
  </code>
</method>

<method>
  <name>
    save
  </name>
  <code>
    /**
    * 
    * Method corresponding to the save action. It gets the mode from 
    * the querystring to and saves the data then sets nextAction to be 
    * null, which returns the module in view mode. 
    * 
    * @access private
    * 
    */
    private function __save()
    {
        $mode = $this->getParam("mode", NULL);
        $this->{DATACLASS}->saveItem($mode);
        return $this->nextAction(NULL);
    }
    
  </code>
</method>

<method>
  <name>
    delete
  </name>
  <code>
    /**
    * 
    * Method corresponding to the delete action. It requires a 
    * confirmation, and then delets the item, and then sets 
    * nextAction to be null, which returns the module in
    * view mode. 
    * 
    * @access private
    * 
    */
    private function __delete()
    {
        // retrieve the confirmation code from the querystring
        $confirm=$this->getParam("confirm", "no");
        if ($confirm=="yes") {
            $this->{DATACLASS}->deleteItem();
            return $this->nextAction(NULL);
        }
    }
  </code>
</method>

<method>
  <name>
    actionerror
  </name>
  <code>
    /**
    * 
    * Method to return an error when the action is not a valid 
    * action method
    * 
    * @access private
    * @return string The dump template populated with the error message
    * 
    */
    private function __actionError()
    {
        $this->setVar('str', "<h3>"
          . $this->objLanguage->languageText("phrase_unrecognizedaction")
          .": " . $action . "</h3>");
        return 'dump_tpl.php';
    }
  </code>
</method>

<method>
  <name>
    validaction
  </name>
  <code>
    /**
    * 
    * Method to check if a given action is a valid method
    * of this class preceded by double underscore (__). If the action 
    * is not a valid method it returns FALSE, if it is a valid method
    * of this class it returns TRUE.
    * 
    * @access private
    * @param string $action The action parameter
    * @return boolean TRUE|FALSE
    * 
    */
    private function __validAction($action)
    {
        if (method_exists($this, "__".$action)) {
            return TRUE;
        } else {
            return FALSE;
        }
    }
  </code>
</method>

<method>
  <name>
    getmethod
  </name>
  <code>
    /**
    * 
    * Method to convert the action parameter into the name of 
    * a method of this class.
    * 
    * @access private
    * @param string $action The action parameter 
    * @return stromg the name of the method
    * 
    */
    private function __getMethod($action)
    {
        if ($this->__validAction($action)) {
            return "__" . $action;
        } else {
            return "__actionError";
        }
    }
  </code>
</method>

<!--
<method>
  <name>
  </name>
  <code>
  </code>
</method>
-->

</chisimba_controller_methods>