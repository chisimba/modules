<?php
/**
* Class that contains the chapters in the contextcontent module
* 
* @author Tohir Solomons
*/
class db_contextcontent_chapters extends dbtable
{

    /**
    * Constructor
    */
    public function init()
    {
        parent::init('tbl_contextcontent_chapters');
        $this->objUser =& $this->getObject('user', 'security');
        $this->objChapterContent =& $this->getObject('db_contextcontent_chaptercontent');
    }
    
    /**
    * Method to add a chapter
    * @param string $chapterId Record Id if it exists - used for multilingual versions
    * @param string $title Title of Chapter
    * @param string $intro Introduction to the Chapter
    * @param string $language Language Version of the Chapter
    * @return string Record Id of the Chapter
    */
    public function addChapter($chapterId='', $title, $intro, $language='en')
    {
        if ($chapterId == '') {
            $chapterId = $this->autoCreateChapter();
            
            $pageId = $this->objChapterContent->addChapter($chapterId, $title, $intro, $language);
        }
        
        return $chapterId;
    }
    
    /**
    * Method to autogenerated an id for a chapter
    * This is used when a chapter is being created for the version time
    * and passed for language version of the chapter
    * @return string Record Id of Chapter
    */
    private function autoCreateChapter()
    {
        return $this->insert(array(
                'creatorid' => $this->objUser->userId(),
                'datecreated' => strftime('%Y-%m-%d %H:%M:%S', mktime())
            ));
    }
    
    /**
    * Method to delete a chapter
    * @param string $id Record Id of Chapter
    */
    function deleteChapter($id)
    {
        // Delete the Chapter
        $this->delete('id', $id);
        
        // Delete Chapter Content
        $this->objChapterContent->deleteChapterTitle($id);
        
        // Also delete from context
        $objChapterContext = $this->getObject('db_contextcontent_contextchapter');
        $contexts = $objChapterContext->getContextsWithChapter($id);
        
        if (count($contexts) > 0 && is_array($contexts)) {
            
            foreach ($contexts as $context)
            {
                $objChapterContext->objContextChapters->removeChapterFromContext($id, $context);
            }
        }
    }
    

}


?>