<?php
/* ----------- data class extends dbTable------------*/
// security check - must be included in all scripts
if (!$GLOBALS['kewl_entry_point_run']) {
    die("You cannot view this page directly");
}

/*!  \class dbhosportal_replies
*
*  \brief Class that models the hosportal replies database.
*  \brief It basically is an interface class between the hosportal module and the hosportal replies database.
*  \brief This class provides functions to insert, sort, search, edit and delete entries in the database.
*  \brief This class is solely used by the dbhosportal_messages and the view_single_message_subject class.
*  \author Salman Noor
*  \author MIU Intern
*  \author School of Electrical Engineering, WITS Unversity
*  \version 0.68
*  \date    May 3, 2010
* \warning This class's parent is dbTable which is a chisimba core class.
* \warning If the dbTable class is altered in the future. This class may not work.
* \warning Apart from normal PHP. This class uses the mysql language to provide
* the actual functionality. This language is encapsulated with in "double quotes" in a string format.
*/
class dbhosportal_replies extends dbTable {
    /*!
* \brief Private data member of class dbhosportal_replies that stores an object of another class.
* \brief This class is composed of one object from the user_module class in the utilities module of chisimba.
* \brief This object provides options to manipulate and utilize user data.
    */
    private $objUser;

    /**
     *\brief Constructor that set up this class.
     * \brief It defines the table tbl_hosportal_replies and creates private
     * data members from other classes for this class to use.
     *
     */
    function init() {
///Define the table tbl_hosportal_replies. This can only be done if this class
///is inherited by dbTable.
        parent::init('tbl_hosportal_replies');
///Instatiate an object user from the class user_module.
        $this->objUser = $this->getObject('user_module','hosportal');
    }

    /**
     *\brief Memeber function that returns all entries in the tbl_hosportal_replies database.
     * \return A array with all the entries stored.
     */
    function listAll() {
///Return an array.
        return $this->getAll();
///Notice that this funcion is part of the dbTable parent class.
    }

    /**
     *\brief Member function to search the entire replies database for a certain comment and return it.
     * \param comments A string. The comment could be any small part of the entire comment.
     * Examples choosing the word "can" in a comment that contains  the word "canister".
     * The modulus signs % allows you to do this.
     * \warning Do NOT pass variable types as parameters that are not specified in this member function.
     * \return A string that contains the entire comment.
     */
    function listComment($comments) {
        return $this->getAll("WHERE commenttxt LIKE '%" . $comments . "%'");
    }

    /**
     *\brief Member function to return a single entry with a specific id.
     * \param id A string. This Id is generated by mysql and in unique for all entries.
     * the Id is assigned when you create an entry in the database.
     * \warning Do NOT pass variable types as parameters that are not specified in this member function.
     * \warning Make sure you pass the correct id for the entry you want.
     * \return A single entry with all its fields from the database.
     */
    function listSingle($id) {
        return $this->getAll("WHERE id='" . $id . "'");
    }

    /**
     *\brief Member function to insert a new entry into the replies database.
     * \param id A string. The id is not unique but the exact same id for the same
     * stored in the messages database
     * \param title A string. It is the subject matter of the entry.
     * \param comments A string. It is the comment of the entry.
     * \param unreplied A Boolean Value. It is to determine whether the entry has
     * been replied to or not.
     * \param noofreplies A Integer. how many replies this entry has.
     * \warning Do NOT pass variable types as parameters that are not specified in this member function.
     * \return An the same id as was passed in.
     */
    function insertSingle($id,$title,$comments,$unreplied,$noofreplies) {
///Get the user's name that is inserting the entry.
        $userid = $this->objUser->getUserFullName();
///Insert the entry into the database with its relevant fields. If succesful,
///store the entries id into a temporary variable. The insert function is
///from the parent class dbTable.
        $id = $this->insert(array(
                'id' => $id,
                'userid' => $userid,
                'title' => $title,
                'commenttxt' => $comments,
                'modified'=> $this->now(),
                'commenttxtshort'=> $comments,
                'unreplied'=> $unreplied,
                'replies' => $noofreplies
        ));
///return the same id as was passed in.
        return $id;
    }

    /**
     *\brief Member function to edit an existing entry in the replies database.
     * \param id A string. Unique caller id for the exsiting entry.
     * \param title A string. It is the edited or the same subject matter for the exisitng entry.
     * \param comments A string. It is the edited or the same comment for the exisitng entry.
     * \param unreplied A Boolean Value. It is to determine whether the entry has
     * been replied to or not.
     * \param noofreplies A Integer. How many replies this entry has.
     * \warning Do NOT pass variable types as parameters that are not specified in this member function.
     * \warning MAKE SURE you have the correct id as the wrong id will edit the wrong entry.
     * \return The same id for that exisiting entry.
     */
    function updateSingle($id, $title, $comments,$unreplied,$noofreplies) {
///Get the user's name that is editing the exisitng entry.
        $userid = $this->objUser->getUserFullName();
///Update the entry into the database with its relevant fields. If successful,
///store the entries id into a temporary variable. The update function is
///from the parent class dbTable.
        $data=array("userid"=>$userid,"title"=>$title,"commenttxt"=>$comments,"modified"=>$this->now(),"commenttxtshort"=>$comments,"unreplied"=>$unreplied,"replies" => $noofreplies );

        $result = $this->update('id',$id,$data);
///return the same id for that exisitng entry. The id does not change.
        return $result;
    }

    /**
     *\brief Member function to delete an existing entry in the replies database.
     * \param id A string. Unique caller id for the exsiting entry.
     * \warning MAKE SURE you are passing the right id as the wrong id will
     * delete the wrong entry.
     */
    function deleteSingle($id) {
///Delete the entry which that specific id.
        $this->delete("id", $id);
///The delete function is from the parent class dbTable.
    }

    /**
     *\brief Member function to get the no of replies that contain the search parameter.
     * \param subject_matter A string. The subject matter for a specific group of replies.
     * \param searchValue A string. The string could be any small part of the entire comment.
     * Examples choosing the word "can" in a comment that contains  the word "canister".
     *\return An integer of the number of hits made with that specific search parameter.
     */
    function getNoOfSearchedReplies($subject_matter,$searchValue) {
///Get entries with one subject matter according to the subject matter parameter AND
// where the comments OR the subject matter OR the author is like the search parameter and store
///these entries in a temporary variable.
        $sql=   "where title like '".$subject_matter."' and commenttxt like '%".$searchValue."%' || userid like '%$searchValue%'";

///Return the number of entries. Note that is function in part of the parent class dbTable.
        return $this->getRecordCount($sql);
    }

    /**
     *\brief Member function to get all entries that contain the search parameter.
     * \param subject_matter A string. The subject matter for a specific group of replies belonging to a single original message.
     * \param searchValue A string. The string could be any small part of the entire comment.
     * Examples choosing the word "can" in a comment that contains  the word "canister".
     * \param number_of_entries_per_page An Integer. This is to paginate all the entries
     * so it can be  view in batches with the default being to view 5 messages at a time.
     * \param starting_element An Integer. This integer allow you to paginate. This integer
     * will force the result to start from a specific place in the database.
     * \note In essence, if you want view entries 13 to 15. Then the starting_element will be
     * 13 and the number_of_entries_per_page will be 2.
     *\return An array of paginated searched entries.
     */
    function searchReplies($subject_matter,$searchValue,$number_of_entries_per_page = 5,$starting_element = 0) {
///Select all for the replies table with one subject matter according to the subject matter parameter AND the search parameter
//is like the comments or subject matter or
///or author and order them by latest modified and paginate them and store the result in a temporary variable sql.
        $sql=   "select * from tbl_hosportal_replies where title like '".$subject_matter."' and commenttxt like '%".$searchValue."%' || userid like '%$searchValue%' order by modified desc LIMIT $number_of_entries_per_page OFFSET $starting_element";

///Return the array of entries. Note that is function in part of the parent class dbTable.
        return $this->getArray($sql);

    }

    /**
     *\brief Member function to sort all entries by latest modified and return that result as an array.
     * \param subject_matter A string. The subject matter for a specific group of replies belonging to a single original message.
     * \param number_of_entries_per_page An Integer. This is to paginate all the entries
     * so it can be  view in batches with the default being to view 5 messages at a time.
     * \param starting_element An Integer. This integer allow you to paginate. This integer
     * will force the result to start from a specific place in the database.
     * \note In essence, if you want view entries 13 to 15. Then the starting_element will be
     * 13 and the number_of_entries_per_page will be 2.
     * \return An array with the all messages sorted by latest modified.
     */
    function sortByLatestModified($subject_matter = '',$number_of_entries_per_page = 5,$starting_element = 0) {
///Select all or * entries from the table hosportal relies  with one subject matter according to the subject matter parameter
//and order them by the field modified and store the result in a temporary variable. The language MYSQL is used to do this.
//It is important to note that no changes are being made in the database.
        $sql = "select*from tbl_hosportal_replies WHERE title LIKE '".$subject_matter."' order by modified desc LIMIT $number_of_entries_per_page OFFSET $starting_element";
///Convert the temporary variable into an array and return it.
        return $this->getArray($sql);
    }

    /**
     *\brief This member function is very similiar to the sort be last modified function.
     * To see how this member function works, see the sortByLatestModified function.
     */
    function sortByOldestModified($subject_matter = '', $number_of_entries_per_page = 5,$starting_element = 0) {

        $sql = "select*from tbl_hosportal_replies WHERE title LIKE '".$subject_matter."' order by modified asc LIMIT $number_of_entries_per_page OFFSET $starting_element";
        return $this->getArray($sql);

    }

    /**
     *\brief This member function is very similiar to the sort be last modified function.
     * To see how this member function works, see the sortByLatestModified function.
     */
    function sortByAuthorAtoZ($subject_matter = '',$number_of_entries_per_page = 5,$starting_element = 0) {

        $sql = "select*from tbl_hosportal_replies WHERE title LIKE '".$subject_matter."' order by userid asc LIMIT $number_of_entries_per_page OFFSET $starting_element";
        return $this->getArray($sql);
    }

    /**
     *\brief This member function is very similiar to the sort be last modified function.
     * To see how this member function works, see the sortByLatestModified function.
     */
    function sortByAuthorZtoA($subject_matter = '',$number_of_entries_per_page = 5,$starting_element = 0) {

        $sql = "select*from tbl_hosportal_replies WHERE title LIKE '".$subject_matter."' order by userid desc LIMIT $number_of_entries_per_page OFFSET $starting_element";
        return $this->getArray($sql);
    }

    /**
     *\brief This member function is very similiar to the sort be last modified function.
     * To see how this member function works, see the sortByLatestModified function.
     */
    function sortBySubjectMatterAtoZ($number_of_entries_per_page = 5,$starting_element = 0) {

        $sql = "select*from tbl_hosportal_replies WHERE title LIKE '".$subject_matter."' order by title asc LIMIT $number_of_entries_per_page OFFSET $starting_element";
        return $this->getArray($sql);

    }

    /**
     *\brief This member function is very similiar to the sort be last modified function.
     * To see how this member function works, see the sortByLatestModified function.
     */

    function sortBySubjectMatterZtoA($number_of_entries_per_page = 5,$starting_element = 0) {
        $sql = "select*from tbl_hosportal_replies order by title desc LIMIT $number_of_entries_per_page OFFSET $starting_element";
        return $this->getArray($sql);
    }


    /**
     *\brief This member function is very similiar to the sort be last modified function.
     * To see how this member function works, see the sortByLatestModified function.
     */
    function sortByMostReplies($number_of_entries_per_page = 5,$starting_element = 0) {
        $sql = "select*from tbl_hosportal_replies order by replies desc LIMIT $number_of_entries_per_page OFFSET $starting_element";
        return $this->getArray($sql);
    }

    /**
     *\brief This member function is very similiar to the sort be last modified function.
     * To see how this member function works, see the sortByLatestModified function.
     */
    function sortByLeastReplies($number_of_entries_per_page = 5,$starting_element = 0) {
        $sql = "select*from tbl_hosportal_replies order by replies asc LIMIT $number_of_entries_per_page OFFSET $starting_element";
        return $this->getArray($sql);
    }
}
?>
